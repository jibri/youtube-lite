// Type definitions for non-npm package YouTube Data API v3 v3 3.0
// Project: https://developers.google.com/youtube/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://www.googleapis.com/discovery/v1/apis/youtube/v3/rest
// Revision: 20200611

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load YouTube Data API v3 v3 */
  function load(name: "youtube", version: "v3"): PromiseLike<void>;
  function load(name: "youtube", version: "v3", callback: () => any): void;

  namespace youtube {
    interface AccessPolicy {
      /**
       * The value of <code>allowed</code> indicates whether the access to the
       * policy is allowed or denied by default.
       */
      allowed?: boolean;
      /**
       * A list of region codes that identify countries where the default policy do
       * not apply.
       */
      exception?: string[];
    }
    interface Activity {
      /**
       * The <code>contentDetails</code> object contains information about the
       * content associated with the activity. For example, if the
       * <code>snippet.type</code> value is <code>videoRated</code>, then the
       * <code>contentDetails</code> object's content identifies the rated video.
       */
      contentDetails?: ActivityContentDetails;
      /** Etag of this resource */
      etag?: string;
      /** The ID that YouTube uses to uniquely identify the activity. */
      id?: string;
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#activity"</code>.
       */
      kind?: string;
      /**
       * The <code>snippet</code> object contains basic details about the
       * activity, including the activity's type and group ID.
       */
      snippet?: ActivitySnippet;
    }
    interface ActivityContentDetails {
      /**
       * The <code>bulletin</code> object contains details about a channel
       * bulletin post. This object is only present if the
       * <code>snippet.type</code> is <code>bulletin</code>.
       */
      bulletin?: ActivityContentDetailsBulletin;
      /**
       * The <code>channelItem</code> object contains details about a resource
       * which was added to a channel. This property is only present if the
       * <code>snippet.type</code> is <code>channelItem</code>.
       */
      channelItem?: ActivityContentDetailsChannelItem;
      /**
       * The <code>comment</code> object contains information about a resource
       * that received a comment. This property is only present if the
       * <code>snippet.type</code> is <code>comment</code>.
       */
      comment?: ActivityContentDetailsComment;
      /**
       * The <code>favorite</code> object contains information about a video that
       * was marked as a favorite video. This property is only present if the
       * <code>snippet.type</code> is <code>favorite</code>.
       */
      favorite?: ActivityContentDetailsFavorite;
      /**
       * The <code>like</code> object contains information about a resource that
       * received a positive (like) rating. This property is only present if
       * the <code>snippet.type</code> is <code>like</code>.
       */
      like?: ActivityContentDetailsLike;
      /**
       * The <code>playlistItem</code> object contains information about a
       * new playlist item. This property is only present if the
       * <code>snippet.type</code> is <code>playlistItem</code>.
       */
      playlistItem?: ActivityContentDetailsPlaylistItem;
      /**
       * The <code>promotedItem</code> object contains details about a resource
       * which is being promoted. This property is only present if the
       * <code>snippet.type</code> is <code>promotedItem</code>.
       */
      promotedItem?: ActivityContentDetailsPromotedItem;
      /**
       * The <code>recommendation</code> object contains information about a
       * recommended resource. This property is only present if the
       * <code>snippet.type</code> is <code>recommendation</code>.
       */
      recommendation?: ActivityContentDetailsRecommendation;
      /**
       * The <code>social</code> object contains details about a social network
       * post. This property is only present if the <code>snippet.type</code>
       * is <code>social</code>.
       */
      social?: ActivityContentDetailsSocial;
      /**
       * The <code>subscription</code> object contains information about a
       * channel that a user subscribed to. This property is only
       * present if the <code>snippet.type</code> is <code>subscription</code>.
       */
      subscription?: ActivityContentDetailsSubscription;
      /**
       * The <code>upload</code> object contains information about the uploaded
       * video. This property is only present if the <code>snippet.type</code>
       * is <code>upload</code>.
       */
      upload?: ActivityContentDetailsUpload;
    }
    interface ActivityContentDetailsBulletin {
      /**
       * The <code>resourceId</code> object contains information that
       * identifies the resource associated with a bulletin post.
       * @mutable youtube.activities.insert
       */
      resourceId?: ResourceId;
    }
    interface ActivityContentDetailsChannelItem {
      /**
       * The <code>resourceId</code> object contains information that
       * identifies the resource that was added to the channel.
       */
      resourceId?: ResourceId;
    }
    interface ActivityContentDetailsComment {
      /**
       * The <code>resourceId</code> object contains information that
       * identifies the resource associated with the comment.
       */
      resourceId?: ResourceId;
    }
    interface ActivityContentDetailsFavorite {
      /**
       * The <code>resourceId</code> object contains information that
       * identifies the resource that was marked as a favorite.
       */
      resourceId?: ResourceId;
    }
    interface ActivityContentDetailsLike {
      /**
       * The <code>resourceId</code> object contains information that identifies
       * the rated resource.
       */
      resourceId?: ResourceId;
    }
    interface ActivityContentDetailsPlaylistItem {
      /** The value that YouTube uses to uniquely identify the playlist. */
      playlistId?: string;
      /** ID of the item within the playlist. */
      playlistItemId?: string;
      /**
       * The <code>resourceId</code> object contains information about the
       * resource that was added to the playlist.
       */
      resourceId?: ResourceId;
    }
    interface ActivityContentDetailsPromotedItem {
      /** The URL the client should fetch to request a promoted item. */
      adTag?: string;
      /**
       * The URL the client should ping to indicate that the user clicked through
       * on this promoted item.
       */
      clickTrackingUrl?: string;
      /**
       * The URL the client should ping to indicate that the user was shown this
       * promoted item.
       */
      creativeViewUrl?: string;
      /**
       * The type of call-to-action, a message to the user indicating action that
       * can be taken.
       */
      ctaType?: string;
      /**
       * The custom call-to-action button text. If specified, it will override
       * the default button text for the cta_type.
       */
      customCtaButtonText?: string;
      /** The text description to accompany the promoted item. */
      descriptionText?: string;
      /**
       * The URL the client should direct the user to, if the user chooses to
       * visit the advertiser's website.
       */
      destinationUrl?: string;
      /**
       * The list of forecasting URLs. The client should ping all of these URLs
       * when a promoted item is not available, to indicate that a promoted item
       * could have been shown.
       */
      forecastingUrl?: string[];
      /**
       * The list of impression URLs. The client should ping all of these URLs to
       * indicate that the user was shown this promoted item.
       */
      impressionUrl?: string[];
      /** The ID that YouTube uses to uniquely identify the promoted video. */
      videoId?: string;
    }
    interface ActivityContentDetailsRecommendation {
      /** The reason that the resource is recommended to the user. */
      reason?: string;
      /**
       * The <code>resourceId</code> object contains information that
       * identifies the recommended resource.
       */
      resourceId?: ResourceId;
      /**
       * The <code>seedResourceId</code> object contains information about
       * the resource that caused the recommendation.
       */
      seedResourceId?: ResourceId;
    }
    interface ActivityContentDetailsSocial {
      /** The author of the social network post. */
      author?: string;
      /** An image of the post's author. */
      imageUrl?: string;
      /** The URL of the social network post. */
      referenceUrl?: string;
      /**
       * The <code>resourceId</code> object encapsulates information that
       * identifies the resource associated with a social network post.
       */
      resourceId?: ResourceId;
      /** The name of the social network. */
      type?: string;
    }
    interface ActivityContentDetailsSubscription {
      /**
       * The <code>resourceId</code> object contains information that
       * identifies the resource that the user subscribed to.
       */
      resourceId?: ResourceId;
    }
    interface ActivityContentDetailsUpload {
      /** The ID that YouTube uses to uniquely identify the uploaded video. */
      videoId?: string;
    }
    interface ActivityListResponse {
      /** Etag of this resource. */
      etag?: string;
      /** Serialized EventId of the request which produced this response. */
      eventId?: string;
      items?: Activity[];
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#activityListResponse"</code>.
       */
      kind?: string;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the next page in the result set.
       */
      nextPageToken?: string;
      /** General pagination information. */
      pageInfo?: PageInfo;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the previous page in the result set.
       */
      prevPageToken?: string;
      tokenPagination?: any;
      /** The <code>visitorId</code> identifies the visitor. */
      visitorId?: string;
    }
    interface ActivitySnippet {
      /**
       * The ID that YouTube uses to uniquely identify the channel associated
       * with the activity.
       */
      channelId?: string;
      /** Channel title for the channel responsible for this activity */
      channelTitle?: string;
      /**
       * The description of the resource primarily associated with the activity.
       * @mutable youtube.activities.insert
       */
      description?: string;
      /**
       * The group ID associated with the activity. A group ID identifies user
       * events that are associated with the same user and resource. For example,
       * if a user rates a video and marks the same video as a favorite, the
       * entries for those events would have the same group ID in the user's
       * activity feed. In your user interface, you can avoid repetition by
       * grouping events with the same <code>groupId</code> value.
       */
      groupId?: string;
      /**
       * The date and time that the video was uploaded. The value is specified
       * in <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * format.
       */
      publishedAt?: string;
      /**
       * A map of thumbnail images associated with the resource that is primarily
       * associated with the activity. For each object in the map, the key is the
       * name of the thumbnail image, and the value is an object that contains
       * other information about the thumbnail.
       */
      thumbnails?: ThumbnailDetails;
      /** The title of the resource primarily associated with the activity. */
      title?: string;
      /** The type of activity that the resource describes. */
      type?: string;
    }
    interface Caption {
      /** Etag of this resource. */
      etag?: string;
      /** The ID that YouTube uses to uniquely identify the caption track. */
      id?: string;
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#caption"</code>.
       */
      kind?: string;
      /** The <code>snippet</code> object contains basic details about the caption. */
      snippet?: CaptionSnippet;
    }
    interface CaptionListResponse {
      /** Etag of this resource. */
      etag?: string;
      /** Serialized EventId of the request which produced this response. */
      eventId?: string;
      /** A list of captions that match the request criteria. */
      items?: Caption[];
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#captionListResponse"</code>.
       */
      kind?: string;
      /** The <code>visitorId</code> identifies the visitor. */
      visitorId?: string;
    }
    interface CaptionSnippet {
      /** The type of audio track associated with the caption track. */
      audioTrackType?: string;
      /**
       * The reason that YouTube failed to process the caption track. This
       * property is only present if the <code><a href="#state">state</a></code>
       * property's value is <code>failed</code>.
       */
      failureReason?: string;
      /**
       * Indicates whether YouTube synchronized the caption track to the audio
       * track in the video. The value will be <code>true</code> if a sync was
       * explicitly requested when the caption track was uploaded. For example,
       * when calling the <code>captions.insert</code> or
       * <code>captions.update</code> methods, you can set the <code>sync</code>
       * parameter to <code>true</code> to instruct YouTube to sync the uploaded
       * track to the video. If the value is <code>false</code>, YouTube uses
       * the time codes in the uploaded caption track to determine when to display
       * captions.
       */
      isAutoSynced?: boolean;
      /**
       * Indicates whether the track contains closed captions for the deaf
       * and hard of hearing. The default value is <code>false</code>.
       */
      isCC?: boolean;
      /**
       * Indicates whether the caption track is a draft. If the value is
       * <code>true</code>, then the track is not publicly visible.
       * The default value is <code>false</code>.
       * @mutable youtube.captions.insert youtube.captions.update
       */
      isDraft?: boolean;
      /**
       * Indicates whether caption track is formatted for "easy reader,"
       * meaning it is at a third-grade level for language learners.
       * The default value is <code>false</code>.
       */
      isEasyReader?: boolean;
      /**
       * Indicates whether the caption track uses large text for the
       * vision-impaired. The default value is <code>false</code>.
       */
      isLarge?: boolean;
      /**
       * The language of the caption track. The property value is a
       * <a href="http://www.rfc-editor.org/rfc/bcp/bcp47.txt">BCP-47</a>
       * language tag.
       */
      language?: string;
      /**
       * The date and time when the caption track was last updated. The value is
       * specified in <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * format.
       */
      lastUpdated?: string;
      /**
       * The name of the caption track. The name is intended to be visible
       * to the user as an option during playback.
       */
      name?: string;
      /** The caption track's status. */
      status?: string;
      /** The caption track's type. */
      trackKind?: string;
      /**
       * The ID that YouTube uses to uniquely identify the video associated
       * with the caption track.
       * @mutable youtube.captions.insert
       */
      videoId?: string;
    }
    interface CdnSettings {
      /** The format of the video stream that you are sending to Youtube. <br><br> */
      format?: string;
      /** The frame rate of the inbound video data. */
      frameRate?: string;
      /**
       * The <code>ingestionInfo</code> object contains information that YouTube
       * provides that you need to transmit your RTMP or HTTP stream to YouTube.
       */
      ingestionInfo?: IngestionInfo;
      /** The method or protocol used to transmit the video stream. */
      ingestionType?: string;
      /** The resolution of the inbound video data. */
      resolution?: string;
    }
    interface Channel {
      /**
       * The <code>auditionDetails</code> object encapsulates channel data
       * that is relevant for YouTube Partners during the audition process.
       */
      auditDetails?: ChannelAuditDetails;
      /**
       * The <code>brandingSettings</code> object encapsulates information about
       * the branding of the channel.
       */
      brandingSettings?: ChannelBrandingSettings;
      /**
       * The <code>contentDetails</code> object encapsulates information about the
       * channel's content.
       */
      contentDetails?: ChannelContentDetails;
      /**
       * The <code>contentOwnerDetails</code> object encapsulates channel data
       * that is relevant for YouTube Partners linked with the channel.
       */
      contentOwnerDetails?: ChannelContentOwnerDetails;
      /**
       * The <code>conversionPings</code> object encapsulates information about
       * conversion pings that need to be respected by the channel.
       */
      conversionPings?: ChannelConversionPings;
      /** Etag of this resource. */
      etag?: string;
      /** The ID that YouTube uses to uniquely identify the channel. */
      id?: string;
      /**
       * The <code>invideoPromotion</code> object encapsulates information about
       * promotion campaign associated with the channel.
       */
      invideoPromotion?: InvideoPromotion;
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#channel"</code>.
       */
      kind?: string;
      /** Localizations for different languages */
      localizations?: { [P in string]: ChannelLocalization };
      /**
       * The <code>snippet</code> object contains basic details about the channel,
       * such as its title, description, and thumbnail images.
       */
      snippet?: ChannelSnippet;
      /** The <code>statistics</code> object encapsulates statistics for the channel. */
      statistics?: ChannelStatistics;
      /**
       * The <code>status</code> object encapsulates information about the privacy
       * status of the channel.
       */
      status?: ChannelStatus;
      /**
       * The <code>topicDetails</code> object encapsulates information about
       * <a href="http://www.freebase.com">Freebase</a> topics associated with the
       * channel.
       */
      topicDetails?: ChannelTopicDetails;
    }
    interface ChannelAuditDetails {
      /** Whether or not the channel respects the community guidelines. */
      communityGuidelinesGoodStanding?: boolean;
      /** Whether or not the channel has any unresolved claims. */
      contentIdClaimsGoodStanding?: boolean;
      /** Whether or not the channel has any copyright strikes. */
      copyrightStrikesGoodStanding?: boolean;
    }
    interface ChannelBannerResource {
      etag?: string;
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#channelBannerResource"</code>.
       */
      kind?: string;
      /** The URL of this banner image. */
      url?: string;
    }
    interface ChannelBrandingSettings {
      /** Branding properties for the channel view. */
      channel?: ChannelSettings;
      /** Additional experimental branding properties. */
      hints?: PropertyValue[];
      /** Branding properties for branding images. */
      image?: ImageSettings;
      /** Branding properties for the watch page. */
      watch?: WatchSettings;
    }
    interface ChannelContentDetails {
      relatedPlaylists?: {
        /**
         * The ID of the playlist that contains the channel"s favorite videos. Use
         * the <code> <a
         * href="/youtube/v3/docs/playlistItems/insert">playlistItems.insert</a></code>
         * and <code> <a
         * href="/youtube/v3/docs/playlistItems/delete">playlistItems.delete</a></code>
         * to add or remove items from that list.
         */
        favorites?: string;
        /**
         * The ID of the playlist that contains the channel"s liked videos. Use the
         * <code> <a href="/youtube/v3/docs/playlistItems/insert">
         * playlistItems.insert</a></code> and <code> <a
         * href="/youtube/v3/docs/playlistItems/delete">playlistItems.delete</a></code>
         * to add or remove items from that list.
         */
        likes?: string;
        /**
         * The ID of the playlist that contains the channel"s uploaded videos. Use
         * the <code> <a
         * href="/youtube/v3/docs/videos/insert">videos.insert</a></code> method to
         * upload new videos and the <code><a
         * href="/youtube/v3/docs/videos/delete">videos.delete</a></code> method to
         * delete previously uploaded videos.
         */
        uploads?: string;
        /**
         * The ID of the playlist that contains the channel"s watch history. Use the
         * <code> <a
         * href="/youtube/v3/docs/playlistItems/insert">playlistItems.insert</a></code>
         * and <code> <a
         * href="/youtube/v3/docs/playlistItems/delete">playlistItems.delete</a></code>
         * to add or remove items from that list.
         */
        watchHistory?: string;
        /**
         * The ID of the playlist that contains the channel"s watch later playlist.
         * Use the <code><a
         * href="/youtube/v3/docs/playlistItems/insert">playlistItems.insert</a></code>
         * and <code> <a
         * href="/youtube/v3/docs/playlistItems/delete">playlistItems.delete</a></code>
         * to add or remove items from that list.
         */
        watchLater?: string;
      };
    }
    interface ChannelContentOwnerDetails {
      /** The ID of the content owner linked to the channel. */
      contentOwner?: string;
      /**
       * The date and time of when the channel was linked to the content owner.
       * The value is specified in <a href="//www.w3.org/TR/NOTE-datetime">ISO
       * 8601</a>
       * format.
       */
      timeLinked?: string;
    }
    interface ChannelConversionPing {
      /** Defines the context of the ping. */
      context?: string;
      /**
       * The url (without the schema) that the player shall send the ping to.
       * It's at caller's descretion to decide which schema to use (http vs https)
       * Example of a returned url: //googleads.g.doubleclick.net/pagead/
       * viewthroughconversion/962985656/?data=path%3DtHe_path%3Btype%3D
       * cview%3Butuid%3DGISQtTNGYqaYl4sKxoVvKA&labe=default
       * The caller must append biscotti authentication (ms param in case of
       * mobile, for example) to this ping.
       */
      conversionUrl?: string;
    }
    interface ChannelConversionPings {
      /**
       * Pings that the app shall fire (authenticated by biscotti cookie). Each ping
       * has a context, in which the app must fire the ping, and a url identifying
       * the ping.
       */
      pings?: ChannelConversionPing[];
    }
    interface ChannelListResponse {
      /** Etag of this resource. */
      etag?: string;
      /** Serialized EventId of the request which produced this response. */
      eventId?: string;
      items?: Channel[];
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#channelListResponse"</code>.
       */
      kind?: string;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the next page in the result set.
       */
      nextPageToken?: string;
      /** General pagination information. */
      pageInfo?: PageInfo;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the previous page in the result set.
       */
      prevPageToken?: string;
      tokenPagination?: any;
      /** The <code>visitorId</code> identifies the visitor. */
      visitorId?: string;
    }
    interface ChannelLocalization {
      /** The localized strings for channel's description. */
      description?: string;
      /** The localized strings for channel's title. */
      title?: string;
    }
    interface ChannelProfileDetails {
      /** The YouTube channel ID. */
      channelId?: string;
      /** The channel's URL. */
      channelUrl?: string;
      /** The channel's display name. */
      displayName?: string;
      /** The channels's avatar URL. */
      profileImageUrl?: string;
    }
    interface ChannelSection {
      /**
       * The <code>contentDetails</code> object contains details about the channel
       * section content, such as a list of playlists or channels featured in the
       * section.
       */
      contentDetails?: ChannelSectionContentDetails;
      /** Etag of this resource. */
      etag?: string;
      /** The ID that YouTube uses to uniquely identify the channel section. */
      id?: string;
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#channelSection"</code>.
       */
      kind?: string;
      /** Localizations for different languages */
      localizations?: { [P in string]: ChannelSectionLocalization };
      /**
       * The <code>snippet</code> object contains basic details about the channel
       * section, such as its type, style and title.
       */
      snippet?: ChannelSectionSnippet;
      /**
       * The <code>targeting</code> object contains basic targeting settings about
       * the channel section.
       */
      targeting?: ChannelSectionTargeting;
    }
    interface ChannelSectionContentDetails {
      /** The channel ids for type multiple_channels. */
      channels?: string[];
      /**
       * The playlist ids for type single_playlist and multiple_playlists. For
       * singlePlaylist, only one playlistId is allowed.
       */
      playlists?: string[];
    }
    interface ChannelSectionListResponse {
      /** Etag of this resource. */
      etag?: string;
      /** Serialized EventId of the request which produced this response. */
      eventId?: string;
      /** A list of ChannelSections that match the request criteria. */
      items?: ChannelSection[];
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#channelSectionListResponse"</code>.
       */
      kind?: string;
      /** The <code>visitorId</code> identifies the visitor. */
      visitorId?: string;
    }
    interface ChannelSectionLocalization {
      /** The localized strings for channel section's title. */
      title?: string;
    }
    interface ChannelSectionSnippet {
      /**
       * The ID that YouTube uses to uniquely identify the channel that published
       * the channel section.
       */
      channelId?: string;
      /** The language of the channel section's default title and description. */
      defaultLanguage?: string;
      /** Localized title, read-only. */
      localized?: ChannelSectionLocalization;
      /** The position of the channel section in the channel. */
      position?: number;
      /** The style of the channel section. */
      style?: string;
      /** The channel section's title for multiple_playlists and multiple_channels. */
      title?: string;
      /** The type of the channel section. */
      type?: string;
    }
    interface ChannelSectionTargeting {
      /** The country the channel section is targeting. */
      countries?: string[];
      /** The language the channel section is targeting. */
      languages?: string[];
      /** The region the channel section is targeting. */
      regions?: string[];
    }
    interface ChannelSettings {
      /** The country of the channel. */
      country?: string;
      defaultLanguage?: string;
      /** Which content tab users should see when viewing the channel. */
      defaultTab?: string;
      /** Specifies the channel description. */
      description?: string;
      /** Title for the featured channels tab. */
      featuredChannelsTitle?: string;
      /** The list of featured channels. */
      featuredChannelsUrls?: string[];
      /** Lists keywords associated with the channel, comma-separated. */
      keywords?: string;
      /**
       * Whether user-submitted comments left on the channel page need to be
       * approved by the channel owner to be publicly visible.
       */
      moderateComments?: boolean;
      /** A prominent color that can be rendered on this channel page. */
      profileColor?: string;
      /** Whether the tab to browse the videos should be displayed. */
      showBrowseView?: boolean;
      /** Whether related channels should be proposed. */
      showRelatedChannels?: boolean;
      /** Specifies the channel title. */
      title?: string;
      /**
       * The ID for a Google Analytics account to track and measure traffic to the
       * channels.
       */
      trackingAnalyticsAccountId?: string;
      /** The trailer of the channel, for users that are not subscribers. */
      unsubscribedTrailer?: string;
    }
    interface ChannelSnippet {
      /** The country of the channel. */
      country?: string;
      /** The custom url of the channel. */
      customUrl?: string;
      /** The language of the channel's default title and description. */
      defaultLanguage?: string;
      /** The description of the channel. */
      description?: string;
      /** Localized title and description, read-only. */
      localized?: ChannelLocalization;
      /**
       * The date and time that the channel was created. The value is specified in
       * < a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * format.
       */
      publishedAt?: string;
      /**
       * A map of thumbnail images associated with the channel. For each object in
       * the map, the key is the name of the thumbnail image, and the value is an
       * object that contains other information about the thumbnail.<br><br> When
       * displaying thumbnails in your application, make sure that your code uses
       * the image URLs exactly as they are returned in API responses. For example,
       * your application should not use the <code>http</code> domain instead of the
       * <code>https</code> domain in a URL returned in an API response.<br><br>
       * Beginning in July 2018, channel thumbnail URLs will only be available in
       * the <code>https</code> domain, which is how the URLs appear in API
       * responses. After that time, you might see broken images in your application
       * if it tries to load YouTube images from the <code>http</code> domain.
       */
      thumbnails?: ThumbnailDetails;
      /** The channel's title. */
      title?: string;
    }
    interface ChannelStatistics {
      /** The number of comments for the channel. */
      commentCount?: string;
      /** Whether or not the number of subscribers is shown for this user. */
      hiddenSubscriberCount?: boolean;
      /** The number of subscribers that the channel has. */
      subscriberCount?: string;
      /** The number of videos uploaded to the channel. */
      videoCount?: string;
      /** The number of times the channel has been viewed. */
      viewCount?: string;
    }
    interface ChannelStatus {
      /**
       * If true, then the user is linked to either a YouTube username or G+
       * account. Otherwise, the user doesn't have a public YouTube identity.
       */
      isLinked?: boolean;
      /**
       * The long uploads status of this channel. See
       * https://support.google.com/youtube/answer/71673 for more information.
       */
      longUploadsStatus?: string;
      madeForKids?: boolean;
      /** Privacy status of the channel. */
      privacyStatus?: string;
      selfDeclaredMadeForKids?: boolean;
    }
    interface ChannelTopicDetails {
      /** A list of Wikipedia URLs that describe the channel's content. */
      topicCategories?: string[];
      /**
       * A list of Freebase topic IDs associated with the channel. You can retrieve
       * information about each topic using the <a
       * href="http://wiki.freebase.com/wiki/Topic_API">Freebase Topic API</a>.
       */
      topicIds?: string[];
    }
    interface Comment {
      /** Etag of this resource. */
      etag?: string;
      /** The ID that YouTube uses to uniquely identify the comment. */
      id?: string;
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#comment"</code>.
       */
      kind?: string;
      /** The <code>snippet</code> object contains basic details about the comment. */
      snippet?: CommentSnippet;
    }
    interface CommentListResponse {
      /** Etag of this resource. */
      etag?: string;
      /** Serialized EventId of the request which produced this response. */
      eventId?: string;
      /** A list of comments that match the request criteria. */
      items?: Comment[];
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#commentListResponse"</code>.
       */
      kind?: string;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the next page in the result set.
       */
      nextPageToken?: string;
      /** General pagination information. */
      pageInfo?: PageInfo;
      tokenPagination?: any;
      /** The <code>visitorId</code> identifies the visitor. */
      visitorId?: string;
    }
    interface CommentSnippet {
      authorChannelId?: CommentSnippetAuthorChannelId;
      /** Link to the author's YouTube channel, if any. */
      authorChannelUrl?: string;
      /** The name of the user who posted the comment. */
      authorDisplayName?: string;
      /** The URL for the avatar of the user who posted the comment. */
      authorProfileImageUrl?: string;
      /** Whether the current viewer can rate this comment. */
      canRate?: boolean;
      /**
       * The id of the corresponding YouTube channel. In case of a channel comment
       * this is the channel the comment refers to. In case of a video comment
       * it's the video's channel.
       */
      channelId?: string;
      /** The total number of likes this comment has received. */
      likeCount?: number;
      /**
       * The comment's moderation status. Will not be set if the comments were
       * requested through the id filter.
       */
      moderationStatus?: string;
      /** The unique id of the parent comment, only set for replies. */
      parentId?: string;
      /**
       * The date and time when the comment was orignally published. The value is
       * specified in <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * format.
       */
      publishedAt?: string;
      /**
       * The comment's text. The format is either plain text or HTML dependent on
       * what has been requested. Even the plain text representation may differ
       * from the text originally posted in that it may replace video links with
       * video titles etc.
       */
      textDisplay?: string;
      /**
       * The comment's original raw text as initially posted or last updated. The
       * original text will only be returned if it is accessible to the viewer,
       * which is only guaranteed if the viewer is the comment's author.
       */
      textOriginal?: string;
      /**
       * The date and time when was last updated . The value is
       * specified in <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * format.
       */
      updatedAt?: string;
      /** The ID of the video the comment refers to, if any. */
      videoId?: string;
      /**
       * The rating the viewer has given to this comment. For the time being this
       * will never return RATE_TYPE_DISLIKE and instead return RATE_TYPE_NONE.
       * This may change in the future.
       */
      viewerRating?: string;
    }
    interface CommentSnippetAuthorChannelId {
      value?: string;
    }
    interface CommentThread {
      /** Etag of this resource. */
      etag?: string;
      /** The ID that YouTube uses to uniquely identify the comment thread. */
      id?: string;
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#commentThread"</code>.
       */
      kind?: string;
      /**
       * The <code>replies</code> object contains a limited number of replies (if
       * any) to the top level comment found in the snippet.
       */
      replies?: CommentThreadReplies;
      /**
       * The <code>snippet</code> object contains basic details about the comment
       * thread and also the top level comment.
       */
      snippet?: CommentThreadSnippet;
    }
    interface CommentThreadListResponse {
      /** Etag of this resource. */
      etag?: string;
      /** Serialized EventId of the request which produced this response. */
      eventId?: string;
      /** A list of comment threads that match the request criteria. */
      items?: CommentThread[];
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#commentThreadListResponse"</code>.
       */
      kind?: string;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the next page in the result set.
       */
      nextPageToken?: string;
      /** General pagination information. */
      pageInfo?: PageInfo;
      tokenPagination?: any;
      /** The <code>visitorId</code> identifies the visitor. */
      visitorId?: string;
    }
    interface CommentThreadReplies {
      /**
       * A limited number of replies. Unless the number of replies returned equals
       * total_reply_count in the snippet the returned replies are only a subset
       * of the total number of replies.
       */
      comments?: Comment[];
    }
    interface CommentThreadSnippet {
      /**
       * Whether the current viewer of the thread can reply to it. This is viewer
       * specific - other viewers may see a different value for this field.
       */
      canReply?: boolean;
      /**
       * The YouTube channel the comments in the thread refer to or the channel
       * with the video the comments refer to. If video_id isn't set the comments
       * refer to the channel itself.
       */
      channelId?: string;
      /**
       * Whether the thread (and therefore all its comments) is visible to all
       * YouTube users.
       */
      isPublic?: boolean;
      /** The top level comment of this thread. */
      topLevelComment?: Comment;
      /** The total number of replies (not including the top level comment). */
      totalReplyCount?: number;
      /**
       * The ID of the video the comments refer to, if any. No video_id implies a
       * channel discussion comment.
       */
      videoId?: string;
    }
    interface ContentRating {
      /**
       * The video's Australian Classification Board (ACB) or Australian
       * Communications and Media Authority (ACMA) rating. ACMA ratings are used
       * to classify children's television programming.
       */
      acbRating?: string;
      /**
       * The video's rating from Italy's Autorit&agrave; per le Garanzie nelle
       * Comunicazioni (AGCOM).
       */
      agcomRating?: string;
      /**
       * The video's Anatel (Asociaci&oacute;n Nacional de Televisi&oacute;n)
       * rating for Chilean television.
       */
      anatelRating?: string;
      /** The video's British Board of Film Classification (BBFC) rating. */
      bbfcRating?: string;
      /** The video's rating from Thailand's Board of Film and Video Censors. */
      bfvcRating?: string;
      /**
       * The video's rating from the Austrian Board of Media Classification
       * (Bundesministerium f&uuml;r Unterricht, Kunst und Kultur).
       */
      bmukkRating?: string;
      /**
       * The video's rating from the Canadian Radio-Television and
       * Telecommunications Commission (CRTC) for Canadian French-language
       * broadcasts. For more information, see the
       * <a href="http://www.cbsc.ca/english/agvot/frenchsystem.php">Canadian
       * Broadcast Standards Council</a> website.
       */
      catvfrRating?: string;
      /**
       * Rating system for Canadian TV - Canadian TV Classification System
       * The video's rating from the Canadian Radio-Television and
       * Telecommunications Commission (CRTC) for Canadian English-language
       * broadcasts. For more information, see the
       * <a href="http://www.cbsc.ca/english/agvot/englishsystem.php">Canadian
       * Broadcast Standards Council</a> website.
       */
      catvRating?: string;
      /** The video's Central Board of Film Certification (CBFC - India) rating. */
      cbfcRating?: string;
      /**
       * The video's Consejo de Calificaci&oacute;n Cinematogr&aacute;fica (Chile)
       * rating.
       */
      cccRating?: string;
      /**
       * The video's rating from Portugal's Comiss&atilde;o de
       * Classifica&ccedil;&atilde;o de Espect&acute;culos.
       */
      cceRating?: string;
      /** The video's rating in Switzerland. */
      chfilmRating?: string;
      /** The video's Canadian Home Video Rating System (CHVRS) rating. */
      chvrsRating?: string;
      /**
       * The video's rating from the Commission de Contr&ocirc;le des Films
       * (Belgium).
       */
      cicfRating?: string;
      /**
       * The video's rating from Romania's CONSILIUL NATIONAL AL AUDIOVIZUALULUI
       * (CNA).
       */
      cnaRating?: string;
      /** Rating system in France - Commission de classification cinematographique */
      cncRating?: string;
      /**
       * The video's rating from France's Conseil sup&eacute;rieur de
       * l’audiovisuel, which rates broadcast content.
       */
      csaRating?: string;
      /**
       * The video's rating from Luxembourg's Commission de surveillance
       * de la classification des films (CSCF).
       */
      cscfRating?: string;
      /** The video's rating in the Czech Republic. */
      czfilmRating?: string;
      /**
       * The video's Departamento de Justi&ccedil;a, Classifica&ccedil;&atilde;o,
       * Qualifica&ccedil;&atilde;o e T&iacute;tulos (DJCQT - Brazil) rating.
       */
      djctqRating?: string;
      /** Reasons that explain why the video received its DJCQT (Brazil) rating. */
      djctqRatingReasons?: string[];
      /**
       * Rating system in Turkey - Evaluation and Classification Board of the
       * Ministry of Culture and Tourism
       */
      ecbmctRating?: string;
      /** The video's rating in Estonia. */
      eefilmRating?: string;
      /** The video's rating in Egypt. */
      egfilmRating?: string;
      /**
       * The video's Eirin (&#26144;&#20523;) rating.
       * Eirin is the Japanese rating system.
       */
      eirinRating?: string;
      /** The video's rating from Malaysia's Film Censorship Board. */
      fcbmRating?: string;
      /**
       * The video's rating from Hong Kong's Office for Film, Newspaper
       * and Article Administration.
       */
      fcoRating?: string;
      /**
       * <span class="deprecated">This property has been deprecated. Use the
       * <code><a
       * href="#contentDetails.contentRating.cncRating">contentDetails.contentRating.cncRating</a></code>
       * instead.</span>
       */
      fmocRating?: string;
      /** The video's rating from South Africa's Film and Publication Board. */
      fpbRating?: string;
      /** Reasons that explain why the video received its FPB (South Africa) rating. */
      fpbRatingReasons?: string[];
      /**
       * The video's Freiwillige Selbstkontrolle der Filmwirtschaft
       * (FSK - Germany) rating.
       */
      fskRating?: string;
      /** The video's rating in Greece. */
      grfilmRating?: string;
      /**
       * The video's Instituto de la Cinematograf&iacute;a y de las Artes
       * Audiovisuales (ICAA - Spain) rating.
       */
      icaaRating?: string;
      /**
       * The video's Irish Film Classification Office (IFCO - Ireland) rating.
       * See the <a
       * href="http://www.ifco.ie/website/ifco/ifcoweb.nsf/web/classcatintro">IFCO</a>
       * website for more information.
       */
      ifcoRating?: string;
      /** The video's rating in Israel. */
      ilfilmRating?: string;
      /**
       * The video's INCAA (Instituto Nacional de Cine y Artes Audiovisuales -
       * Argentina) rating.
       */
      incaaRating?: string;
      /** The video's rating from the Kenya Film Classification Board. */
      kfcbRating?: string;
      /**
       * The video's NICAM/Kijkwijzer rating from the Nederlands Instituut
       * voor de Classificatie van Audiovisuele Media (Netherlands).
       */
      kijkwijzerRating?: string;
      /**
       * The video's Korea Media Rating Board
       * (&#50689;&#49345;&#47932;&#46321;&#44553;&#50948;&#50896;&#54924;) rating.
       * The KMRB rates videos in South Korea.
       */
      kmrbRating?: string;
      /** The video's rating from Indonesia's Lembaga Sensor Film. */
      lsfRating?: string;
      /** The video's rating from Malta's Film Age-Classification Board. */
      mccaaRating?: string;
      /**
       * The video's rating from the Danish Film Institute's (Det Danske
       * Filminstitut) Media Council for Children and Young People.
       */
      mccypRating?: string;
      /** The video's rating system for Vietnam - MCST */
      mcstRating?: string;
      /**
       * The video's rating from Singapore's Media Development Authority (MDA) and,
       * specifically, it's Board of Film Censors (BFC).
       */
      mdaRating?: string;
      /** The video's rating from Medietilsynet, the Norwegian Media Authority. */
      medietilsynetRating?: string;
      /**
       * The video's rating from Finland's Kansallinen Audiovisuaalinen Instituutti
       * (National Audiovisual Institute).
       */
      mekuRating?: string;
      /**
       * The rating system for MENA countries, a clone of MPAA. It is needed to
       * prevent titles go live w/o additional QC check, since some of them can be
       * inappropriate for the countries at all. See b/33408548 for more details.
       */
      menaMpaaRating?: string;
      /**
       * The video's rating from the Ministero dei Beni e delle Attivit&agrave;
       * Culturali e del Turismo (Italy).
       */
      mibacRating?: string;
      /** The video's Ministerio de Cultura (Colombia) rating. */
      mocRating?: string;
      /**
       * The video's rating from Taiwan's Ministry of Culture
       * (&#25991;&#21270;&#37096;).
       */
      moctwRating?: string;
      /** The video's Motion Picture Association of America (MPAA) rating. */
      mpaaRating?: string;
      /**
       * The rating system for trailer, DVD, and Ad in the US.  See
       * http://movielabs.com/md/ratings/v2.3/html/US_MPAAT_Ratings.html.
       */
      mpaatRating?: string;
      /**
       * The video's rating from the Movie and Television Review and
       * Classification Board (Philippines).
       */
      mtrcbRating?: string;
      /** The video's rating in Poland. */
      nbcplRating?: string;
      /** The video's rating from the Maldives National Bureau of Classification. */
      nbcRating?: string;
      /**
       * The video's rating from the <a href="http://www.nfc.bg/">Bulgarian
       * National Film Center</a>.
       */
      nfrcRating?: string;
      /** The video's rating from Nigeria's National Film and Video Censors Board. */
      nfvcbRating?: string;
      /**
       * The video's rating from the Nacion&atilde;lais Kino centrs (National Film
       * Centre of Latvia).
       */
      nkclvRating?: string;
      /** The National Media Council ratings system for United Arab Emirates. */
      nmcRating?: string;
      /**
       * The video's Office of Film and Literature Classification
       * (OFLC - New Zealand) rating.
       */
      oflcRating?: string;
      /** The video's rating in Peru. */
      pefilmRating?: string;
      /**
       * The video's rating from the Hungarian Nemzeti Filmiroda, the Rating
       * Committee of the National Office of Film.
       */
      rcnofRating?: string;
      /** The video's rating in Venezuela. */
      resorteviolenciaRating?: string;
      /**
       * The video's General Directorate of Radio, Television and Cinematography
       * (Mexico) rating.
       */
      rtcRating?: string;
      /**
       * The video's rating from Ireland's Raidi&oacute; Teilif&iacute;s
       * &Eacute;ireann.
       */
      rteRating?: string;
      /**
       * The video's National Film Registry of the Russian Federation
       * (MKRF - Russia) rating.
       */
      russiaRating?: string;
      /** The video's rating in Slovakia. */
      skfilmRating?: string;
      /** The video's rating in Iceland. */
      smaisRating?: string;
      /**
       * The video's rating from Statens medier&aring;d (Sweden's National Media
       * Council).
       */
      smsaRating?: string;
      /** The video's TV Parental Guidelines (TVPG) rating. */
      tvpgRating?: string;
      /** A rating that YouTube uses to identify age-restricted content. */
      ytRating?: string;
    }
    interface GeoPoint {
      /** Altitude above the reference ellipsoid, in meters. */
      altitude?: number;
      /** Latitude in degrees. */
      latitude?: number;
      /** Longitude in degrees. */
      longitude?: number;
    }
    interface GuideCategory {
      /** Etag of this resource. */
      etag?: string;
      /** The ID that YouTube uses to uniquely identify the guide category. */
      id?: string;
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#guideCategory"</code>.
       */
      kind?: string;
      /**
       * The <code>snippet</code> object contains basic details about the category,
       * such as its title.
       */
      snippet?: GuideCategorySnippet;
    }
    interface GuideCategoryListResponse {
      /** Etag of this resource. */
      etag?: string;
      /** Serialized EventId of the request which produced this response. */
      eventId?: string;
      /**
       * A list of categories that can be associated with YouTube channels. In this
       * map, the category ID is the map key, and its value is the corresponding
       * <code>guideCategory</code> resource.
       */
      items?: GuideCategory[];
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#guideCategoryListResponse"</code>.
       */
      kind?: string;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the next page in the result set.
       */
      nextPageToken?: string;
      pageInfo?: PageInfo;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the previous page in the result set.
       */
      prevPageToken?: string;
      tokenPagination?: any;
      /** The <code>visitorId</code> identifies the visitor. */
      visitorId?: string;
    }
    interface GuideCategorySnippet {
      channelId?: string;
      /** Description of the guide category. */
      title?: string;
    }
    // tslint:disable-next-line:interface-name
    interface I18nLanguage {
      /** Etag of this resource. */
      etag?: string;
      /** The ID that YouTube uses to uniquely identify the i18n language. */
      id?: string;
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#i18nLanguage"</code>.
       */
      kind?: string;
      /**
       * The <code>snippet</code> object contains basic details about the i18n
       * language, such as language code and human-readable name.
       */
      snippet?: I18nLanguageSnippet;
    }
    // tslint:disable-next-line:interface-name
    interface I18nLanguageListResponse {
      /** Etag of this resource. */
      etag?: string;
      /** Serialized EventId of the request which produced this response. */
      eventId?: string;
      /**
       * A list of supported i18n languages. In this map, the i18n language ID is
       * the map key, and its value is the corresponding <code>i18nLanguage</code>
       * resource.
       */
      items?: I18nLanguage[];
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#i18nLanguageListResponse"</code>.
       */
      kind?: string;
      /** The <code>visitorId</code> identifies the visitor. */
      visitorId?: string;
    }
    // tslint:disable-next-line:interface-name
    interface I18nLanguageSnippet {
      /** A short BCP-47 code that uniquely identifies a language. */
      hl?: string;
      /** The human-readable name of the language in the language itself. */
      name?: string;
    }
    // tslint:disable-next-line:interface-name
    interface I18nRegion {
      /** Etag of this resource. */
      etag?: string;
      /** The ID that YouTube uses to uniquely identify the i18n region. */
      id?: string;
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#i18nRegion"</code>.
       */
      kind?: string;
      /**
       * The <code>snippet</code> object contains basic details about the i18n
       * region, such as region code and human-readable name.
       */
      snippet?: I18nRegionSnippet;
    }
    // tslint:disable-next-line:interface-name
    interface I18nRegionListResponse {
      /** Etag of this resource. */
      etag?: string;
      /** Serialized EventId of the request which produced this response. */
      eventId?: string;
      /**
       * A list of regions where YouTube is available. In this map, the i18n region
       * ID is the map key, and its value is the corresponding
       * <code>i18nRegion</code> resource.
       */
      items?: I18nRegion[];
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#i18nRegionListResponse"</code>.
       */
      kind?: string;
      /** The <code>visitorId</code> identifies the visitor. */
      visitorId?: string;
    }
    // tslint:disable-next-line:interface-name
    interface I18nRegionSnippet {
      /** The region code as a 2-letter ISO country code. */
      gl?: string;
      /** The human-readable name of the region. */
      name?: string;
    }
    // tslint:disable-next-line:interface-name
    interface ImageSettings {
      /**
       * The URL for the background image shown on the video watch page. The image
       * should be 1200px by 615px, with a maximum file size of 128k.
       */
      backgroundImageUrl?: LocalizedProperty;
      /**
       * This is used only in update requests; if it's set, we use this URL to
       * generate all of the above banner URLs.
       */
      bannerExternalUrl?: string;
      /** Banner image. Desktop size (1060x175). */
      bannerImageUrl?: string;
      /** Banner image. Mobile size high resolution (1440x395). */
      bannerMobileExtraHdImageUrl?: string;
      /** Banner image. Mobile size high resolution (1280x360). */
      bannerMobileHdImageUrl?: string;
      /** Banner image. Mobile size (640x175). */
      bannerMobileImageUrl?: string;
      /** Banner image. Mobile size low resolution (320x88). */
      bannerMobileLowImageUrl?: string;
      /** Banner image. Mobile size medium/high resolution (960x263). */
      bannerMobileMediumHdImageUrl?: string;
      /** Banner image. Tablet size extra high resolution (2560x424). */
      bannerTabletExtraHdImageUrl?: string;
      /** Banner image. Tablet size high resolution (2276x377). */
      bannerTabletHdImageUrl?: string;
      /** Banner image. Tablet size (1707x283). */
      bannerTabletImageUrl?: string;
      /** Banner image. Tablet size low resolution (1138x188). */
      bannerTabletLowImageUrl?: string;
      /** Banner image. TV size high resolution (1920x1080). */
      bannerTvHighImageUrl?: string;
      /** Banner image. TV size extra high resolution (2120x1192). */
      bannerTvImageUrl?: string;
      /** Banner image. TV size low resolution (854x480). */
      bannerTvLowImageUrl?: string;
      /** Banner image. TV size medium resolution (1280x720). */
      bannerTvMediumImageUrl?: string;
      /** The image map script for the large banner image. */
      largeBrandedBannerImageImapScript?: LocalizedProperty;
      /**
       * The URL for the 854px by 70px image that appears below the video player in
       * the expanded video view of the video watch page.
       */
      largeBrandedBannerImageUrl?: LocalizedProperty;
      /** The image map script for the small banner image. */
      smallBrandedBannerImageImapScript?: LocalizedProperty;
      /**
       * The URL for the 640px by 70px banner image that appears below the video
       * player in the default view of the video watch page.
       * The URL for the image that appears above the top-left corner of the video
       * player. This is a 25-pixel-high image with a flexible width that cannot
       * exceed 170 pixels.
       */
      smallBrandedBannerImageUrl?: LocalizedProperty;
      /**
       * The URL for a 1px by 1px tracking pixel that can be used to collect
       * statistics for views of the channel or video pages.
       */
      trackingImageUrl?: string;
      watchIconImageUrl?: string;
    }
    // tslint:disable-next-line:interface-name
    interface IngestionInfo {
      /**
       * The backup ingestion URL that you should use to stream video to
       * YouTube. You have the option of simultaneously streaming the content
       * that you are sending to the <code>ingestionAddress</code> to this URL.
       */
      backupIngestionAddress?: string;
      /**
       * The primary ingestion URL that you should use to stream video to
       * YouTube. You must stream video to this URL.<br><br>
       * Depending on which application or tool you use to encode
       * your video stream, you may need to enter the stream URL and stream
       * name separately or you may need to concatenate them in the following
       * format:<br><pre><strong>STREAM_URL/STREAM_NAME</strong></pre>
       */
      ingestionAddress?: string;
      /**
       * This ingestion url may be used instead of
       * <code>backupIngestionAddress</code> in order to stream via RTMPS. Not
       * applicable to non-RTMP streams.
       */
      rtmpsBackupIngestionAddress?: string;
      /**
       * This ingestion url may be used instead of
       * <code>ingestionAddress</code> in order to stream via RTMPS. Not applicable
       * to non-RTMP streams.
       */
      rtmpsIngestionAddress?: string;
      /** The HTTP or RTMP stream name that YouTube assigns to the video stream. */
      streamName?: string;
    }
    // tslint:disable-next-line:interface-name
    interface InvideoBranding {
      /** The bytes the uploaded image. Only used in api to youtube communication. */
      imageBytes?: string;
      /** The url of the uploaded image. Only used in apiary to api communication. */
      imageUrl?: string;
      /**
       * The spatial position within the video where the branding watermark will be
       * displayed.
       */
      position?: InvideoPosition;
      /**
       * The channel to which this branding links. If not present it defaults to
       * the current channel.
       */
      targetChannelId?: string;
      /** The temporal position within the video where watermark will be displayed. */
      timing?: InvideoTiming;
    }
    // tslint:disable-next-line:interface-name
    interface InvideoPosition {
      /** Describes in which corner of the video the visual widget will appear. */
      cornerPosition?: string;
      /** Defines the position type. */
      type?: string;
    }
    // tslint:disable-next-line:interface-name
    interface InvideoPromotion {
      /**
       * The default temporal position within the video where the promoted item will
       * be displayed. Can be overridden by more specific timing in the item.
       */
      defaultTiming?: InvideoTiming;
      /** List of promoted items in decreasing priority. */
      items?: PromotedItem[];
      /**
       * The spatial position within the video where the promoted item will be
       * displayed.
       */
      position?: InvideoPosition;
      /**
       * Indicates whether the channel's promotional campaign uses "smart timing."
       * This feature attempts to show promotions at a point in the video when they
       * are more likely to be clicked and less likely to disrupt the viewing
       * experience. This feature also picks up a single promotion to show on each
       * video.
       */
      useSmartTiming?: boolean;
    }
    // tslint:disable-next-line:interface-name
    interface InvideoTiming {
      /**
       * Defines the duration in milliseconds for which the promotion should be
       * displayed. If missing, the client should use the default.
       */
      durationMs?: string;
      /**
       * Defines the time at which the promotion will appear. Depending on the value
       * of <code>type</code> the value of the <code>offsetMs</code> field will
       * represent a time offset from the start or from the end of the video,
       * expressed in milliseconds.
       */
      offsetMs?: string;
      /**
       * Describes a timing type. If the value is <code>offsetFromStart</code>, then
       * the <code>offsetMs</code> field represents an offset from the start of the
       * video. If the value is <code>offsetFromEnd</code>, then the
       * <code>offsetMs</code> field represents an offset from the end of the video.
       */
      type?: string;
    }
    interface LanguageTag {
      value?: string;
    }
    interface LevelDetails {
      /** The name that should be used when referring to this level. */
      displayName?: string;
    }
    interface LiveBroadcast {
      /**
       * The <code>contentDetails</code> object contains information about the
       * event's video content, such as whether the content can be shown in an
       * embedded video player or if it will be archived and therefore available
       * for viewing after the event has concluded.
       */
      contentDetails?: LiveBroadcastContentDetails;
      /** Etag of this resource. */
      etag?: string;
      /** The ID that YouTube assigns to uniquely identify the broadcast. */
      id?: string;
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#liveBroadcast"</code>.
       */
      kind?: string;
      /**
       * The <code>snippet</code> object contains basic details about the event,
       * including its title, description, start time, and end time.
       */
      snippet?: LiveBroadcastSnippet;
      /**
       * The <code>statistics</code> object contains info about the event's current
       * stats. These include concurrent viewers and total chat count. Statistics
       * can change (in either direction) during the lifetime of an event.
       * Statistics are only returned while the event is live.
       */
      statistics?: LiveBroadcastStatistics;
      /**
       * The <code>status</code> object contains information about the event's
       * status.
       */
      status?: LiveBroadcastStatus;
    }
    interface LiveBroadcastContentDetails {
      /**
       * This value uniquely identifies the
       * <code><a href="/youtube/v3/live/docs/liveStreams">live stream</a></code>
       * bound to the broadcast.
       */
      boundStreamId?: string;
      /**
       * The date and time that the live stream referenced by
       * <code>boundStreamId</code> was last updated.
       */
      boundStreamLastUpdateTimeMs?: string;
      closedCaptionsType?: string;
      /**
       * This setting indicates whether auto start is enabled for this broadcast.
       * The default value for this property is <code>false</code>.<br><br>
       * This setting can only be used by Events.
       */
      enableAutoStart?: boolean;
      /**
       * This setting indicates whether auto stop is enabled for this broadcast.
       * The default value for this property is <code>false</code>.<br><br>
       * This setting can only be used by Events.
       */
      enableAutoStop?: boolean;
      /**
       * This setting indicates whether HTTP POST closed captioning is enabled for
       * this broadcast. The ingestion URL of the closed captions is returned
       * through the liveStreams API.  This is mutually exclusive with using the
       * <code>closed_captions_type</code> property, and is equivalent to setting
       * <code>closed_captions_type</code> to CLOSED_CAPTIONS_HTTP_POST.
       */
      enableClosedCaptions?: boolean;
      /**
       * This setting indicates whether YouTube should enable content encryption
       * for the broadcast.
       */
      enableContentEncryption?: boolean;
      /**
       * This setting determines whether viewers can access DVR controls while
       * watching the video. DVR controls enable the viewer to control the video
       * playback experience by pausing, rewinding, or fast forwarding content.
       * The default value for this property is <code>true</code>.<br><br>
       *
       * <strong>Important:</strong> You must set the value to <code>true</code>
       * and also set the <code>enableArchive</code> property's value to
       * <code>true</code> if you want to make playback available immediately
       * after the broadcast ends.
       */
      enableDvr?: boolean;
      /**
       * This setting indicates whether the broadcast video can be played in an
       * embedded player. If you choose to archive the video (using the
       * <code>enableArchive</code> property), this setting will also apply to
       * the archived video.
       */
      enableEmbed?: boolean;
      /** Indicates whether this broadcast has low latency enabled. */
      enableLowLatency?: boolean;
      /**
       * If both this and enable_low_latency are set, they must match.
       * LATENCY_NORMAL should match enable_low_latency=false
       * LATENCY_LOW should match enable_low_latency=true
       * LATENCY_ULTRA_LOW should have enable_low_latency omitted.
       */
      latencyPreference?: string;
      /**
       * The mesh for projecting the video if <code>projection</code> is
       * <code>mesh</code>. The mesh value must be a UTF-8 string containing the
       * base-64 encoding of 3D mesh data that follows the <a
       * href="https://github.com/google/spatial-media/blob/master/docs/spherical-video-v2-rfc.md">
       * Spherical Video V2 RFC specification</a> for an mshp box, excluding the box
       * size and type but including the following four reserved zero bytes for the
       * version and flags.
       */
      mesh?: string;
      /**
       * The <code>monitorStream</code> object contains information about the
       * monitor stream, which the broadcaster can use to review the event
       * content before the broadcast stream is shown publicly.
       */
      monitorStream?: MonitorStreamInfo;
      /**
       * The projection format of this broadcast. This defaults to
       * <code>rectangular</code>.
       */
      projection?: string;
      /**
       * Automatically start recording after the event goes live.
       * The default value for this property is <code>true</code>.<br><br>
       *
       * <strong>Important:</strong> You must also set the <code>enableDvr</code>
       * property's value to
       * <code>true</code> if you want the playback to be available immediately
       * after the broadcast ends. If you set this property's value to
       * <code>true</code> but do not also set the <code>enableDvr</code> property
       * to <code>true</code>, there may be a delay of around one day before the
       * archived video will be available for playback.
       */
      recordFromStart?: boolean;
      /**
       * This setting indicates whether the broadcast should automatically begin
       * with an <a
       * href="/youtube/v3/live/getting-started#Displaying_Slates">in-stream
       * slate</a> when you update the broadcast's status to <code>live</code>.
       * After updating the status, you then need to send a
       * <code><a
       * href="/youtube/v3/live/docs/liveCuepoints/insert">liveCuepoints.insert</a></code>
       * request that sets the cuepoint's <code>eventState</code> to
       * <code>end</code> to remove the in-stream slate and make your broadcast
       * stream visible to viewers.
       */
      startWithSlate?: boolean;
    }
    interface LiveBroadcastListResponse {
      /** Etag of this resource. */
      etag?: string;
      /** Serialized EventId of the request which produced this response. */
      eventId?: string;
      /** A list of broadcasts that match the request criteria. */
      items?: LiveBroadcast[];
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#liveBroadcastListResponse"</code>.
       */
      kind?: string;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the next page in the result set.
       */
      nextPageToken?: string;
      /** General pagination information. */
      pageInfo?: PageInfo;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the previous page in the result set.
       */
      prevPageToken?: string;
      tokenPagination?: any;
      /** The <code>visitorId</code> identifies the visitor. */
      visitorId?: string;
    }
    interface LiveBroadcastSnippet {
      /**
       * The date and time that the broadcast actually ended. This information is
       * only available once the broadcast's state is <code>complete</code>. The
       * value is specified in <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * format.
       */
      actualEndTime?: string;
      /**
       * The date and time that the broadcast actually started. This information is
       * only available once the broadcast's state is <code>live</code>. The
       * value is specified in <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * format.
       */
      actualStartTime?: string;
      /**
       * The ID that YouTube uses to uniquely identify the channel that
       * is publishing the broadcast.
       */
      channelId?: string;
      /**
       * The broadcast's description. As with the <code>title</code>, you can set
       * this field by modifying the broadcast resource or by setting the
       * <code><a
       * href="/youtube/v3/docs/videos#snippet.description">description</a></code>
       * field of the corresponding video resource.
       */
      description?: string;
      /**
       * Indicates whether this broadcast is the default broadcast.
       * Internal only.
       */
      isDefaultBroadcast?: boolean;
      /** The id of the live chat for this broadcast. */
      liveChatId?: string;
      /**
       * The date and time that the broadcast was added to YouTube's live broadcast
       * schedule. The value is specified in
       * <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * format.
       */
      publishedAt?: string;
      /**
       * The date and time that the broadcast is scheduled to end. The value
       * is specified in <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * format.
       */
      scheduledEndTime?: string;
      /**
       * The date and time that the broadcast is scheduled to start. The value
       * is specified in <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * format.
       */
      scheduledStartTime?: string;
      /**
       * A map of thumbnail images associated with the broadcast. For each nested
       * object in this object, the key is the name of the thumbnail image, and
       * the value is an object that contains other information about the
       * thumbnail.
       */
      thumbnails?: ThumbnailDetails;
      /**
       * The broadcast's title. Note that the broadcast represents exactly one
       * YouTube video. You can set this field by modifying the broadcast resource
       * or by setting the
       * <code><a href="/youtube/v3/docs/videos#snippet.title">title</a></code>
       * field of the corresponding video resource.
       */
      title?: string;
    }
    interface LiveBroadcastStatistics {
      /**
       * The total number of live chat messages currently on the broadcast. The
       * property and its value will be present if the broadcast is public, has
       * the live chat feature enabled, and has at least one message. Note that
       * this field will not be filled after the broadcast ends. So this property
       * would not identify the number of chat messages for an archived video of a
       * completed live broadcast.
       */
      totalChatCount?: string;
    }
    interface LiveBroadcastStatus {
      /**
       * The broadcast's status. The status can be updated using the API's
       * <code><a
       * href="/youtube/v3/live/docs/liveBroadcasts/transition"
       * >liveBroadcasts.transition</a></code> method.
       */
      lifeCycleStatus?: string;
      /** Priority of the live broadcast event (internal state). */
      liveBroadcastPriority?: string;
      /**
       * Whether the broadcast is made for kids or not, decided by YouTube instead
       * of the creator. This field is read only.
       */
      madeForKids?: boolean;
      /**
       * The broadcast's privacy status. Note that the broadcast represents
       * exactly one YouTube video, so the privacy settings are identical to
       * those supported for videos. In addition, you can set this field by
       * modifying the broadcast resource or by setting the
       * <code><a
       * href="/youtube/v3/docs/videos#status.privacyStatus"
       * >privacyStatus</a></code>
       * field of the corresponding video resource.
       */
      privacyStatus?: string;
      /** The broadcast's recording status. */
      recordingStatus?: string;
      /**
       * This field will be set to True if the creator declares the broadcast to be
       * kids only: go/live-cw-work.
       */
      selfDeclaredMadeForKids?: boolean;
    }
    interface LiveChatBan {
      /** Etag of this resource. */
      etag?: string;
      /** The ID that YouTube assigns to uniquely identify the ban. */
      id?: string;
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * `"youtube#liveChatBan"`.
       */
      kind?: string;
      /** The `snippet` object contains basic details about the ban. */
      snippet?: LiveChatBanSnippet;
    }
    interface LiveChatBanSnippet {
      /** The duration of a ban, only filled if the ban has type TEMPORARY. */
      banDurationSeconds?: string;
      bannedUserDetails?: ChannelProfileDetails;
      /** The chat this ban is pertinent to. */
      liveChatId?: string;
      /** The type of ban. */
      type?: string;
    }
    interface LiveChatFanFundingEventDetails {
      /** A rendered string that displays the fund amount and currency to the user. */
      amountDisplayString?: string;
      /** The amount of the fund. */
      amountMicros?: string;
      /** The currency in which the fund was made. */
      currency?: string;
      /** The comment added by the user to this fan funding event. */
      userComment?: string;
    }
    interface LiveChatMessage {
      /**
       * The <code>authorDetails</code> object contains basic details about the
       * user that posted this message.
       */
      authorDetails?: LiveChatMessageAuthorDetails;
      /** Etag of this resource. */
      etag?: string;
      /** The ID that YouTube assigns to uniquely identify the message. */
      id?: string;
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#liveChatMessage"</code>.
       */
      kind?: string;
      /** The <code>snippet</code> object contains basic details about the message. */
      snippet?: LiveChatMessageSnippet;
    }
    interface LiveChatMessageAuthorDetails {
      /** The YouTube channel ID. */
      channelId?: string;
      /** The channel's URL. */
      channelUrl?: string;
      /** The channel's display name. */
      displayName?: string;
      /** Whether the author is a moderator of the live chat. */
      isChatModerator?: boolean;
      /** Whether the author is the owner of the live chat. */
      isChatOwner?: boolean;
      /** Whether the author is a sponsor of the live chat. */
      isChatSponsor?: boolean;
      /** Whether the author's identity has been verified by YouTube. */
      isVerified?: boolean;
      /** The channels's avatar URL. */
      profileImageUrl?: string;
    }
    interface LiveChatMessageDeletedDetails {
      deletedMessageId?: string;
    }
    interface LiveChatMessageListResponse {
      /** Etag of this resource. */
      etag?: string;
      /** Serialized EventId of the request which produced this response. */
      eventId?: string;
      items?: LiveChatMessage[];
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#liveChatMessageListResponse"</code>.
       */
      kind?: string;
      nextPageToken?: string;
      /**
       * The date and time when the underlying stream went offline. The value is
       * specified in <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * format.
       */
      offlineAt?: string;
      /** General pagination information. */
      pageInfo?: PageInfo;
      /** The amount of time the client should wait before polling again. */
      pollingIntervalMillis?: number;
      tokenPagination?: any;
      /** The <code>visitorId</code> identifies the visitor. */
      visitorId?: string;
    }
    interface LiveChatMessageRetractedDetails {
      retractedMessageId?: string;
    }
    interface LiveChatMessageSnippet {
      /**
       * The ID of the user that authored this message, this field is not always
       * filled.
       * textMessageEvent - the user that wrote the message
       * fanFundingEvent - the user that funded the broadcast
       * newSponsorEvent - the user that just became a sponsor
       * messageDeletedEvent - the moderator that took the action
       * messageRetractedEvent - the author that retracted their message
       * userBannedEvent - the moderator that took the action
       * superChatEvent - the user that made the purchase
       */
      authorChannelId?: string;
      /**
       * Contains a string that can be displayed to the user.
       * If this field is not present the message is silent, at the moment only
       * messages of type TOMBSTONE and CHAT_ENDED_EVENT are silent.
       */
      displayMessage?: string;
      /**
       * Details about the funding event, this is only set if the type is
       * 'fanFundingEvent'.
       */
      fanFundingEventDetails?: LiveChatFanFundingEventDetails;
      /** Whether the message has display content that should be displayed to users. */
      hasDisplayContent?: boolean;
      liveChatId?: string;
      messageDeletedDetails?: LiveChatMessageDeletedDetails;
      messageRetractedDetails?: LiveChatMessageRetractedDetails;
      /**
       * The date and time when the message was orignally published. The value is
       * specified in <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * format.
       */
      publishedAt?: string;
      /**
       * Details about the Super Chat event, this is only set if the type is
       * 'superChatEvent'.
       */
      superChatDetails?: LiveChatSuperChatDetails;
      /**
       * Details about the Super Sticker event, this is only set if the type is
       * 'superStickerEvent'.
       */
      superStickerDetails?: LiveChatSuperStickerDetails;
      /**
       * Details about the text message, this is only set if the type is
       * 'textMessageEvent'.
       */
      textMessageDetails?: LiveChatTextMessageDetails;
      /**
       * The type of message, this will always be present, it determines the
       * contents of the message as well as which fields will be present.
       */
      type?: string;
      userBannedDetails?: LiveChatUserBannedMessageDetails;
    }
    interface LiveChatModerator {
      /** Etag of this resource. */
      etag?: string;
      /** The ID that YouTube assigns to uniquely identify the moderator. */
      id?: string;
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#liveChatModerator"</code>.
       */
      kind?: string;
      /**
       * The <code>snippet</code> object contains basic details about the
       * moderator.
       */
      snippet?: LiveChatModeratorSnippet;
    }
    interface LiveChatModeratorListResponse {
      /** Etag of this resource. */
      etag?: string;
      /** Serialized EventId of the request which produced this response. */
      eventId?: string;
      /** A list of moderators that match the request criteria. */
      items?: LiveChatModerator[];
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#liveChatModeratorListResponse"</code>.
       */
      kind?: string;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the next page in the result set.
       */
      nextPageToken?: string;
      /** General pagination information. */
      pageInfo?: PageInfo;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the previous page in the result set.
       */
      prevPageToken?: string;
      tokenPagination?: any;
      /** The <code>visitorId</code> identifies the visitor. */
      visitorId?: string;
    }
    interface LiveChatModeratorSnippet {
      /** The ID of the live chat this moderator can act on. */
      liveChatId?: string;
      /** Details about the moderator. */
      moderatorDetails?: ChannelProfileDetails;
    }
    interface LiveChatSuperChatDetails {
      /** A rendered string that displays the fund amount and currency to the user. */
      amountDisplayString?: string;
      /** The amount purchased by the user, in micros (1,750,000 micros = 1.75). */
      amountMicros?: string;
      /** The currency in which the purchase was made. */
      currency?: string;
      /**
       * The tier in which the amount belongs. Lower amounts belong to lower
       * tiers. The lowest tier is <code>1</code>.
       */
      tier?: number;
      /** The comment added by the user to this Super Chat event. */
      userComment?: string;
    }
    interface LiveChatSuperStickerDetails {
      /** A rendered string that displays the fund amount and currency to the user. */
      amountDisplayString?: string;
      /** The amount purchased by the user, in micros (1,750,000 micros = 1.75). */
      amountMicros?: string;
      /** The currency in which the purchase was made. */
      currency?: string;
      /** Information about the Super Sticker. */
      superStickerMetadata?: SuperStickerMetadata;
      /**
       * The tier in which the amount belongs. Lower amounts belong to lower
       * tiers. The lowest tier is <code>1</code>.
       */
      tier?: number;
    }
    interface LiveChatTextMessageDetails {
      /** The user's message. */
      messageText?: string;
    }
    interface LiveChatUserBannedMessageDetails {
      /**
       * The duration of the ban. This property is only present if the
       * <code>banType</code> is <code>temporary</code>.
       */
      banDurationSeconds?: string;
      /** The details of the user that was banned. */
      bannedUserDetails?: ChannelProfileDetails;
      /** The type of ban. */
      banType?: string;
    }
    interface LiveStream {
      /**
       * The <code>cdn</code> object defines the live stream's content delivery
       * network (CDN) settings. These settings provide details about the manner
       * in which you stream your content to YouTube.
       */
      cdn?: CdnSettings;
      /**
       * The <code>content_details</code> object contains information about the
       * stream, including the closed captions ingestion URL.
       */
      contentDetails?: LiveStreamContentDetails;
      /** Etag of this resource. */
      etag?: string;
      /** The ID that YouTube assigns to uniquely identify the stream. */
      id?: string;
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#liveStream"</code>.
       */
      kind?: string;
      /**
       * The <code>snippet</code> object contains basic details about the
       * stream, including its channel, title, and description.
       */
      snippet?: LiveStreamSnippet;
      /**
       * The <code>status</code> object contains information about
       * live stream's status.
       */
      status?: LiveStreamStatus;
    }
    interface LiveStreamConfigurationIssue {
      /** The long-form description of the issue and how to resolve it. */
      description?: string;
      /** The short-form reason for this issue. */
      reason?: string;
      /** How severe this issue is to the stream. */
      severity?: string;
      /** The kind of error happening. */
      type?: string;
    }
    interface LiveStreamContentDetails {
      /** The ingestion URL where the closed captions of this stream are sent. */
      closedCaptionsIngestionUrl?: string;
      /**
       * Indicates whether the stream is reusable, which means that it
       * can be bound to multiple broadcasts. It is common for
       * broadcasters to reuse the same stream for many different
       * broadcasts if those broadcasts occur at different times.<br><br>
       * If you set this value to <code>false</code>, then the stream
       * will not be reusable, which means that it can only be bound to
       * one broadcast. Non-reusable streams differ from reusable streams in the
       * following ways:
       * <ul>
       * <li>A non-reusable stream can only be bound to one broadcast.</li>
       * <li>A non-reusable stream might be deleted by an automated process
       * after the broadcast ends.</li>
       * <li>The <code><a href="/youtube/v3/live/docs/liveStreams/list">
       * liveStreams.list</a></code> method does not list non-reusable streams
       * if you call the method and set the <code>mine</code> parameter to
       * <code>true</code>. The only way to use that method to retrieve the
       * resource for a non-reusable stream is to use the <code>id</code>
       * parameter to identify the stream.</li>
       * </ul>
       */
      isReusable?: boolean;
    }
    interface LiveStreamHealthStatus {
      /** The configurations issues on this stream */
      configurationIssues?: LiveStreamConfigurationIssue[];
      /** The last time this status was updated (in seconds) */
      lastUpdateTimeSeconds?: string;
      /** The status code of this stream */
      status?: string;
    }
    interface LiveStreamListResponse {
      /** Etag of this resource. */
      etag?: string;
      /** Serialized EventId of the request which produced this response. */
      eventId?: string;
      /** A list of live streams that match the request criteria. */
      items?: LiveStream[];
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#liveStreamListResponse"</code>.
       */
      kind?: string;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the next page in the result set.
       */
      nextPageToken?: string;
      pageInfo?: PageInfo;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the previous page in the result set.
       */
      prevPageToken?: string;
      tokenPagination?: any;
      /** The <code>visitorId</code> identifies the visitor. */
      visitorId?: string;
    }
    interface LiveStreamSnippet {
      /**
       * The ID that YouTube uses to uniquely identify the channel that
       * is transmitting the stream.
       */
      channelId?: string;
      /**
       * The stream's description. The value cannot be longer than 10000
       * characters.
       */
      description?: string;
      isDefaultStream?: boolean;
      /**
       * The date and time that the stream was created. The value is specified in
       * <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * format.
       */
      publishedAt?: string;
      /** The stream's title. The value must be between 1 and 128 characters long. */
      title?: string;
    }
    interface LiveStreamStatus {
      /** The health status of the stream. */
      healthStatus?: LiveStreamHealthStatus;
      streamStatus?: string;
    }
    interface LocalizedProperty {
      default?: string;
      /** The language of the default property. */
      defaultLanguage?: LanguageTag;
      localized?: LocalizedString[];
    }
    interface LocalizedString {
      language?: string;
      value?: string;
    }
    interface Member {
      /** Etag of this resource. */
      etag?: string;
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#member"</code>.
       */
      kind?: string;
      /** The <code>snippet</code> object contains basic details about the member. */
      snippet?: MemberSnippet;
    }
    interface MemberListResponse {
      /** Etag of this resource. */
      etag?: string;
      /** Serialized EventId of the request which produced this response. */
      eventId?: string;
      /** A list of members that match the request criteria. */
      items?: Member[];
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#memberListResponse"</code>.
       */
      kind?: string;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the next page in the result set.
       */
      nextPageToken?: string;
      pageInfo?: PageInfo;
      tokenPagination?: any;
      /** The <code>visitorId</code> identifies the visitor. */
      visitorId?: string;
    }
    interface MembershipsDetails {
      /**
       * Ids of all levels that the user has access to. This includes the currently
       * active level and all other levels that are included because of a higher
       * purchase.
       */
      accessibleLevels?: string[];
      /** Id of the highest level that the user has access to at the moment. */
      highestAccessibleLevel?: string;
      /**
       * Display name for the highest level that the user has access to at the
       * moment.
       */
      highestAccessibleLevelDisplayName?: string;
      /**
       * Data about memberships duration without taking into consideration pricing
       * levels.
       */
      membershipsDuration?: MembershipsDuration;
      /** Data about memberships duration on particular pricing levels. */
      membershipsDurationAtLevels?: MembershipsDurationAtLevel[];
    }
    interface MembershipsDuration {
      /**
       * The date and time when the user became a continuous member across all
       * levels.
       */
      memberSince?: string;
      /**
       * The cumulative time the user has been a member across all levels in
       * complete months (the time is rounded down to the nearest integer).
       */
      memberTotalDurationMonths?: number;
    }
    interface MembershipsDurationAtLevel {
      /** Pricing level ID. */
      level?: string;
      /**
       * The date and time when the user became a continuous member for the given
       * level.
       */
      memberSince?: string;
      /**
       * The cumulative time the user has been a member for the given level in
       * complete months (the time is rounded down to the nearest integer).
       */
      memberTotalDurationMonths?: number;
    }
    interface MembershipsLevel {
      /** Etag of this resource. */
      etag?: string;
      /** The ID that YouTube assigns to uniquely identify the memberships level. */
      id?: string;
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#membershipsLevelListResponse"</code>.
       */
      kind?: string;
      /** The <code>snippet</code> object contains basic details about the level. */
      snippet?: MembershipsLevelSnippet;
    }
    interface MembershipsLevelListResponse {
      /** Etag of this resource. */
      etag?: string;
      /** Serialized EventId of the request which produced this response. */
      eventId?: string;
      /** A list of pricing levels offered by a creator to the fans. */
      items?: MembershipsLevel[];
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#membershipsLevelListResponse"</code>.
       */
      kind?: string;
      /** The <code>visitorId</code> identifies the visitor. */
      visitorId?: string;
    }
    interface MembershipsLevelSnippet {
      /** The id of the channel that's offering channel memberships. */
      creatorChannelId?: string;
      /** Details about the pricing level. */
      levelDetails?: LevelDetails;
    }
    interface MemberSnippet {
      /** The id of the channel that's offering memberships. */
      creatorChannelId?: string;
      /** Details about the member. */
      memberDetails?: ChannelProfileDetails;
      /** Details about the user's membership. */
      membershipsDetails?: MembershipsDetails;
    }
    interface MonitorStreamInfo {
      /**
       * If you have set the
       * <code><a href="#enableMonitorStream">enableMonitorStream</a></code>
       * property to <code>true</code>, then this property determines the
       * length of the live broadcast delay.
       */
      broadcastStreamDelayMs?: number;
      /** HTML code that embeds a player that plays the monitor stream. */
      embedHtml?: string;
      /**
       * This value determines whether the monitor stream is enabled for the
       * broadcast. If the monitor stream is enabled, then YouTube will
       * broadcast the event content on a special stream intended only for
       * the broadcaster's consumption. The broadcaster can use the stream
       * to review the event content and also to identify the optimal times
       * to insert cuepoints.<br><br>
       * You need to set this value to <code>true</code> if you intend to have
       * a broadcast delay for your event.<br><br>
       * <strong>Note:</strong> This property cannot be updated once the
       * broadcast is in the <code>testing</code> or <code>live</code> state.
       */
      enableMonitorStream?: boolean;
    }
    interface PageInfo {
      /** The number of results included in the API response. */
      resultsPerPage?: number;
      /** The total number of results in the result set. */
      totalResults?: number;
    }
    interface Playlist {
      /**
       * The <code>contentDetails</code> object contains information like
       * video count.
       */
      contentDetails?: PlaylistContentDetails;
      /** Etag of this resource. */
      etag?: string;
      /** The ID that YouTube uses to uniquely identify the playlist. */
      id?: string;
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#playlist"</code>.
       */
      kind?: string;
      /** Localizations for different languages */
      localizations?: { [P in string]: PlaylistLocalization };
      /**
       * The <code>player</code> object contains information that you would use
       * to play the playlist in an embedded player.
       */
      player?: PlaylistPlayer;
      /**
       * The <code>snippet</code> object contains basic details about the
       * playlist, such as its title and description.
       */
      snippet?: PlaylistSnippet;
      /**
       * The <code>status</code> object contains status information for the
       * playlist.
       */
      status?: PlaylistStatus;
    }
    interface PlaylistContentDetails {
      /** The number of videos in the playlist. */
      itemCount?: number;
    }
    interface PlaylistItem {
      /**
       * The <code>contentDetails</code> object is included in the resource if
       * the included item is a YouTube video. The object contains additional
       * information about the video.
       */
      contentDetails?: PlaylistItemContentDetails;
      /** Etag of this resource. */
      etag?: string;
      /** The ID that YouTube uses to uniquely identify the playlist item. */
      id?: string;
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#playlistItem"</code>.
       */
      kind?: string;
      /**
       * The <code>snippet</code> object contains basic details about the
       * playlist item, such as its title and position in the playlist.
       */
      snippet?: PlaylistItemSnippet;
      /**
       * The <code>status</code> object contains information about the playlist
       * item's privacy status.
       */
      status?: PlaylistItemStatus;
    }
    interface PlaylistItemContentDetails {
      /**
       * The time, measured in seconds from the start of the video, when the video
       * should stop playing. (The playlist owner can specify the times when the
       * video should start and stop playing when the video is played in the context
       * of the playlist.) By default, assume that the <code>video.endTime</code> is
       * the end of the video.
       */
      endAt?: string;
      /** A user-generated note for this item. */
      note?: string;
      /**
       * The time, measured in seconds from the start of the video, when the video
       * should start playing. (The playlist owner can specify the times when the
       * video should start and stop playing when the video is played in the context
       * of the playlist.) The default value is <code>0</code>.
       */
      startAt?: string;
      /**
       * The ID that YouTube uses to uniquely identify a video. To <a
       * href="/youtube/v3/docs/video/list.html">retrieve the <code>video</code>
       * resource</a>, set the <code>id</code> query parameter to this value in your
       * API request.
       */
      videoId?: string;
      /**
       * The date and time that the video was published to YouTube. The value is
       * specified in <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * format.
       */
      videoPublishedAt?: string;
    }
    interface PlaylistItemListResponse {
      etag?: string;
      /** Serialized EventId of the request which produced this response. */
      eventId?: string;
      /** A list of playlist items that match the request criteria. */
      items?: PlaylistItem[];
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#playlistItemListResponse"</code>.
       * Etag of this resource.
       */
      kind?: string;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the next page in the result set.
       */
      nextPageToken?: string;
      /** General pagination information. */
      pageInfo?: PageInfo;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the previous page in the result set.
       */
      prevPageToken?: string;
      tokenPagination?: any;
      /** The <code>visitorId</code> identifies the visitor. */
      visitorId?: string;
    }
    interface PlaylistItemSnippet {
      /**
       * The ID that YouTube uses to uniquely identify the user that added
       * the item to the playlist.
       */
      channelId?: string;
      /** Channel title for the channel that the playlist item belongs to. */
      channelTitle?: string;
      /** The item's description. */
      description?: string;
      /**
       * The ID that YouTube uses to uniquely identify thGe playlist that the
       * playlist item is in.
       */
      playlistId?: string;
      /**
       * The order in which the item appears in the playlist. The value uses a
       * zero-based index, so the first item has a position of <code>0</code>,
       * the second item has a position of <code>1</code>, and so forth.
       */
      position?: number;
      /**
       * The date and time that the item was added to the playlist. The value is
       * specified in <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * format.
       */
      publishedAt?: string;
      /**
       * The <code>id</code> object contains information that can be used to
       * uniquely identify the resource that is included in the playlist as
       * the playlist item.
       */
      resourceId?: ResourceId;
      /**
       * A map of thumbnail images associated with the playlist item. For each
       * object in the map, the key is the name of the thumbnail image, and the
       * value is an object that contains other information about the thumbnail.
       */
      thumbnails?: ThumbnailDetails;
      /** The item's title. */
      title?: string;
    }
    interface PlaylistItemStatus {
      /** This resource's privacy status. */
      privacyStatus?: string;
    }
    interface PlaylistListResponse {
      /** Etag of this resource. */
      etag?: string;
      /** Serialized EventId of the request which produced this response. */
      eventId?: string;
      /** A list of playlists that match the request criteria */
      items?: Playlist[];
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#playlistListResponse"</code>.
       */
      kind?: string;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the next page in the result set.
       */
      nextPageToken?: string;
      /** General pagination information. */
      pageInfo?: PageInfo;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the previous page in the result set.
       */
      prevPageToken?: string;
      tokenPagination?: any;
      /** The <code>visitorId</code> identifies the visitor. */
      visitorId?: string;
    }
    interface PlaylistLocalization {
      /** The localized strings for playlist's description. */
      description?: string;
      /** The localized strings for playlist's title. */
      title?: string;
    }
    interface PlaylistPlayer {
      /**
       * An <code>&lt;iframe&gt;</code> tag that embeds a player that will
       * play the playlist.
       */
      embedHtml?: string;
    }
    interface PlaylistSnippet {
      /**
       * The ID that YouTube uses to uniquely identify the channel that
       * published the playlist.
       */
      channelId?: string;
      /** The channel title of the channel that the video belongs to. */
      channelTitle?: string;
      /** The language of the playlist's default title and description. */
      defaultLanguage?: string;
      /** The playlist's description. */
      description?: string;
      /** Localized title and description, read-only. */
      localized?: PlaylistLocalization;
      /**
       * The date and time that the playlist was created. The value is specified
       * in <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * format.
       */
      publishedAt?: string;
      /** Keyword tags associated with the playlist. */
      tags?: string[];
      /**
       * A map of thumbnail images associated with the playlist. For each object
       * in the map, the key is the name of the thumbnail image, and the value
       * is an object that contains other information about the thumbnail.
       */
      thumbnails?: ThumbnailDetails;
      /** The playlist's title. */
      title?: string;
    }
    interface PlaylistStatus {
      /** The playlist's privacy status. */
      privacyStatus?: string;
    }
    interface PromotedItem {
      /**
       * A custom message to display for this promotion. This field is currently
       * ignored unless the promoted item is a website.
       */
      customMessage?: string;
      /** Identifies the promoted item. */
      id?: PromotedItemId;
      /**
       * If true, the content owner's name will be used when displaying the
       * promotion. This field can only be set when the update is made on behalf of
       * the content owner.
       */
      promotedByContentOwner?: boolean;
      /**
       * The temporal position within the video where the promoted item will be
       * displayed. If present, it overrides the default timing.
       */
      timing?: InvideoTiming;
    }
    interface PromotedItemId {
      /**
       * If type is recentUpload, this field identifies the channel from which to
       * take the recent upload. If missing, the channel is assumed to be the same
       * channel for which the invideoPromotion is set.
       */
      recentlyUploadedBy?: string;
      /** Describes the type of the promoted item. */
      type?: string;
      /**
       * If the promoted item represents a video, this field represents the unique
       * YouTube ID identifying it. This field will be present only if
       * <code>type</code> has the value <code>video</code>.
       */
      videoId?: string;
      /**
       * If the promoted item represents a website, this field represents the url
       * pointing to the website. This field will be present only if
       * <code>type</code> has the value <code>website</code>.
       */
      websiteUrl?: string;
    }
    interface PropertyValue {
      /** A property. */
      property?: string;
      /** The property's value. */
      value?: string;
    }
    interface ResourceId {
      /**
       * The ID that YouTube uses to uniquely identify the referred resource, if
       * that resource is a channel. This property is only present if the
       * <code>resourceId.kind</code> value is <code>youtube#channel</code>.
       */
      channelId?: string;
      /** The type of the API resource. */
      kind?: string;
      /**
       * The ID that YouTube uses to uniquely identify the referred resource, if
       * that resource is a playlist. This property is only present if the
       * <code>resourceId.kind</code> value is <code>youtube#playlist</code>.
       */
      playlistId?: string;
      /**
       * The ID that YouTube uses to uniquely identify the referred resource, if
       * that resource is a video. This property is only present if the
       * <code>resourceId.kind</code> value is <code>youtube#video</code>.
       */
      videoId?: string;
    }
    interface SearchListResponse {
      /** Etag of this resource. */
      etag?: string;
      /** Serialized EventId of the request which produced this response. */
      eventId?: string;
      /** Pagination information for token pagination. */
      items?: SearchResult[];
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#searchListResponse"</code>.
       */
      kind?: string;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the next page in the result set.
       */
      nextPageToken?: string;
      /** General pagination information. */
      pageInfo?: PageInfo;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the previous page in the result set.
       */
      prevPageToken?: string;
      regionCode?: string;
      tokenPagination?: any;
      /** The <code>visitorId</code> identifies the visitor. */
      visitorId?: string;
    }
    interface SearchResult {
      /** Etag of this resource. */
      etag?: string;
      /**
       * The <code>id</code> object contains information that can be used to
       * uniquely identify the resource that matches the search request.
       */
      id?: ResourceId;
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#searchResult"</code>.
       */
      kind?: string;
      /**
       * The <code>snippet</code> object contains basic details about a search
       * result, such as its title or description. For example, if the search result
       * is a video, then the title will be the
       * video's title and the description will be the video's description.
       */
      snippet?: SearchResultSnippet;
    }
    interface SearchResultSnippet {
      /**
       * The value that YouTube uses to uniquely identify the channel that
       * published the resource that the search result identifies.
       */
      channelId?: string;
      /**
       * The title of the channel that published the resource that the search result
       * identifies.
       */
      channelTitle?: string;
      /** A description of the search result. */
      description?: string;
      /**
       * It indicates if the resource (video or channel) has upcoming/active live
       * broadcast content. Or it's "none" if there is not any upcoming/active
       * live broadcasts.
       */
      liveBroadcastContent?: string;
      /**
       * The creation date and time of the resource that the search result
       * identifies. The value is specified in <a
       * href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * format.
       */
      publishedAt?: string;
      /**
       * A map of thumbnail images associated with the search result. For each
       * object in the map, the key is the name of the thumbnail image, and the
       * value is an object that contains other information about the thumbnail.
       */
      thumbnails?: ThumbnailDetails;
      /** The title of the search result. */
      title?: string;
    }
    interface Sponsor {
      /** Etag of this resource. */
      etag?: string;
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * `"youtube#sponsor"`.
       */
      kind?: string;
      /** The `snippet` object contains basic details about the sponsor. */
      snippet?: SponsorSnippet;
    }
    interface SponsorListResponse {
      /** Etag of this resource. */
      etag?: string;
      /** Serialized EventId of the request which produced this response. */
      eventId?: string;
      /** A list of sponsors that match the request criteria. */
      items?: Sponsor[];
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * `"youtube#sponsorListResponse".
       */
      kind?: string;
      /**
       * The token that can be used as the value of the `pageToken` parameter to
       * retrieve the next page in the result set.
       */
      nextPageToken?: string;
      pageInfo?: PageInfo;
      tokenPagination?: any;
      /** The `visitorId` identifies the visitor. */
      visitorId?: string;
    }
    interface SponsorSnippet {
      /** The id of the channel being sponsored. */
      channelId?: string;
      /** The cumulative time a user has been a sponsor in months. */
      cumulativeDurationMonths?: number;
      /** Details about the sponsor. */
      sponsorDetails?: ChannelProfileDetails;
      /**
       * The date and time when the user became a sponsor. The value is
       * specified in <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * (`YYYY-MM-DDThh:mm:ss.sZ`) format.
       */
      sponsorSince?: string;
    }
    interface Subscription {
      /**
       * The <code>contentDetails</code> object contains basic statistics about the
       * subscription.
       */
      contentDetails?: SubscriptionContentDetails;
      /** Etag of this resource. */
      etag?: string;
      /** The ID that YouTube uses to uniquely identify the subscription. */
      id?: string;
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#subscription"</code>.
       */
      kind?: string;
      /**
       * The <code>snippet</code> object contains basic details about the
       * subscription, including its title and the channel that the user subscribed
       * to.
       */
      snippet?: SubscriptionSnippet;
      /**
       * The <code>subscriberSnippet</code> object contains basic details about the
       * subscriber.
       */
      subscriberSnippet?: SubscriptionSubscriberSnippet;
    }
    interface SubscriptionContentDetails {
      /**
       * The type of activity this subscription is for
       * (only uploads, everything).
       */
      activityType?: string;
      /**
       * The number of new items in the subscription since its content was last
       * read.
       */
      newItemCount?: number;
      /** The approximate number of items that the subscription points to. */
      totalItemCount?: number;
    }
    interface SubscriptionListResponse {
      /** Etag of this resource. */
      etag?: string;
      /** Serialized EventId of the request which produced this response. */
      eventId?: string;
      /** A list of subscriptions that match the request criteria. */
      items?: Subscription[];
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#subscriptionListResponse"</code>.
       */
      kind?: string;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the next page in the result set.
       */
      nextPageToken?: string;
      pageInfo?: PageInfo;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the previous page in the result set.
       */
      prevPageToken?: string;
      tokenPagination?: any;
      /** The <code>visitorId</code> identifies the visitor. */
      visitorId?: string;
    }
    interface SubscriptionSnippet {
      /** The ID that YouTube uses to uniquely identify the subscriber's channel. */
      channelId?: string;
      /** Channel title for the channel that the subscription belongs to. */
      channelTitle?: string;
      /** The subscription's details. */
      description?: string;
      /**
       * The date and time that the subscription was created. The value is
       * specified in <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * format.
       */
      publishedAt?: string;
      /**
       * The <code>id</code> object contains information about the channel that
       * the user subscribed to.
       */
      resourceId?: ResourceId;
      /**
       * A map of thumbnail images associated with the video. For each object
       * in the map, the key is the name of the thumbnail image, and the value
       * is an object that contains other information about the thumbnail.
       */
      thumbnails?: ThumbnailDetails;
      /** The subscription's title. */
      title?: string;
    }
    interface SubscriptionSubscriberSnippet {
      /** The channel ID of the subscriber. */
      channelId?: string;
      /** The description of the subscriber. */
      description?: string;
      /** Thumbnails for this subscriber. */
      thumbnails?: ThumbnailDetails;
      /** The title of the subscriber. */
      title?: string;
    }
    interface SuperChatEvent {
      /** Etag of this resource. */
      etag?: string;
      /** The ID that YouTube assigns to uniquely identify the Super Chat event. */
      id?: string;
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * `"youtube#superChatEvent"`.
       */
      kind?: string;
      /** The `snippet` object contains basic details about the Super Chat event. */
      snippet?: SuperChatEventSnippet;
    }
    interface SuperChatEventListResponse {
      /** Etag of this resource. */
      etag?: string;
      /** Serialized EventId of the request which produced this response. */
      eventId?: string;
      /** A list of Super Chat purchases that match the request criteria. */
      items?: SuperChatEvent[];
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#superChatEventListResponse"</code>.
       */
      kind?: string;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the next page in the result set.
       */
      nextPageToken?: string;
      pageInfo?: PageInfo;
      tokenPagination?: any;
      /** The <code>visitorId</code> identifies the visitor. */
      visitorId?: string;
    }
    interface SuperChatEventSnippet {
      /**
       * The purchase amount, in micros of the purchase currency.  e.g., 1 is
       * represented as 1000000.
       */
      amountMicros?: string;
      /** Channel id where the event occurred. */
      channelId?: string;
      /** The text contents of the comment left by the user. */
      commentText?: string;
      /**
       * The date and time when the event occurred. The value is
       * specified in <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * format.
       */
      createdAt?: string;
      /** The currency in which the purchase was made.  ISO 4217. */
      currency?: string;
      /**
       * A rendered string that displays the purchase amount and currency
       * (e.g., "$1.00").  The string is rendered for the given language.
       */
      displayString?: string;
      /** True if this event is a Super Sticker event. */
      isSuperStickerEvent?: boolean;
      /**
       * The tier for the paid message, which is based on the amount of money spent
       * to purchase the message.
       */
      messageType?: number;
      /**
       * If this event is a Super Sticker event, this field will contain metadata
       * about the Super Sticker.
       */
      superStickerMetadata?: SuperStickerMetadata;
      /** Details about the supporter. */
      supporterDetails?: ChannelProfileDetails;
    }
    interface SuperStickerMetadata {
      /**
       * Internationalized alt text that describes the sticker image and any
       * animation associated with it.
       */
      altText?: string;
      /** Specifies the localization language in which the alt text is returned. */
      altTextLanguage?: string;
      /**
       * Unique identifier of the Super Sticker. This is a shorter form of the
       * alt_text that includes pack name and a recognizable characteristic of the
       * sticker.
       */
      stickerId?: string;
    }
    interface Thumbnail {
      /** (Optional) Height of the thumbnail image. */
      height?: number;
      /** The thumbnail image's URL. */
      url?: string;
      /** (Optional) Width of the thumbnail image. */
      width?: number;
    }
    interface ThumbnailDetails {
      /** The default image for this resource. */
      default?: Thumbnail;
      /** The high quality image for this resource. */
      high?: Thumbnail;
      /** The maximum resolution quality image for this resource. */
      maxres?: Thumbnail;
      /** The medium quality image for this resource. */
      medium?: Thumbnail;
      /** The standard quality image for this resource. */
      standard?: Thumbnail;
    }
    interface ThumbnailSetResponse {
      /** Etag of this resource. */
      etag?: string;
      /** Serialized EventId of the request which produced this response. */
      eventId?: string;
      /** A list of thumbnails. */
      items?: ThumbnailDetails[];
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#thumbnailSetResponse"</code>.
       */
      kind?: string;
      /** The <code>visitorId</code> identifies the visitor. */
      visitorId?: string;
    }
    // tslint:disable-next-line:no-empty-interface
    interface TokenPagination {}
    interface Video {
      /**
       * Age restriction details related to a video. This data can only be retrieved
       * by the video owner.
       */
      ageGating?: VideoAgeGating;
      /**
       * The <code>contentDetails</code> object contains information about the video
       * content, including the length of the video and its aspect ratio.
       */
      contentDetails?: VideoContentDetails;
      /** Etag of this resource. */
      etag?: string;
      /**
       * The <code>fileDetails</code> object encapsulates information about the
       * video file that was uploaded to YouTube, including the file's resolution,
       * duration, audio and video codecs, stream bitrates, and more. This data can
       * only be retrieved by the video owner.
       */
      fileDetails?: VideoFileDetails;
      /** The ID that YouTube uses to uniquely identify the video. */
      id?: string;
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#video"</code>.
       */
      kind?: string;
      /**
       * The <code>liveStreamingDetails</code> object contains metadata about a live
       * video broadcast. The object will only be present in a <code>video</code>
       * resource if the video is an upcoming, live, or completed live broadcast.
       */
      liveStreamingDetails?: VideoLiveStreamingDetails;
      /**
       * The <code>localizations</code> object contains localized versions of the
       * basic details about the video, such as its title and description.
       */
      localizations?: { [P in string]: VideoLocalization };
      /**
       * The <code>monetizationDetails</code> object encapsulates information
       * about the monetization status of the video.
       */
      monetizationDetails?: VideoMonetizationDetails;
      /**
       * The <code>player</code> object contains information that you would use to
       * play the video in an embedded player.
       */
      player?: VideoPlayer;
      /**
       * The <code>processingDetails</code> object encapsulates information about
       * YouTube's progress in processing the uploaded video file. The properties
       * in the object identify the current processing status and an estimate of
       * the time remaining until YouTube finishes processing the video. This part
       * also indicates whether different types of data or content, such as file
       * details or thumbnail images, are available for the video.<br><br>
       * The <code>processingProgress</code> object is designed to be polled so
       * that the video uploaded can track the progress that YouTube has made in
       * processing the uploaded video file. This data can only be retrieved by
       * the video owner.
       */
      processingDetails?: VideoProcessingDetails;
      /**
       * The <code>projectDetails</code> object contains information about the
       * project specific video metadata.
       */
      projectDetails?: VideoProjectDetails;
      /**
       * The <code>recordingDetails</code> object encapsulates information about the
       * location, date and address where the video was recorded.
       */
      recordingDetails?: VideoRecordingDetails;
      /**
       * The <code>snippet</code> object contains basic details about the video,
       * such as its title, description, and category.
       */
      snippet?: VideoSnippet;
      /** The <code>statistics</code> object contains statistics about the video. */
      statistics?: VideoStatistics;
      /**
       * The <code>status</code> object contains information about the video's
       * uploading, processing, and privacy statuses.
       */
      status?: VideoStatus;
      /**
       * The <code>suggestions</code> object encapsulates suggestions that identify
       * opportunities to improve the video quality or the metadata for the uploaded
       * video. This data can only be retrieved by the video owner.
       */
      suggestions?: VideoSuggestions;
      /**
       * The <code>topicDetails</code> object encapsulates information about <a
       * href="http://www.freebase.com">Freebase</a> topics associated with the
       * video.
       */
      topicDetails?: VideoTopicDetails;
    }
    interface VideoAbuseReport {
      /** Additional comments regarding the abuse report. */
      comments?: string;
      /** The language that the content was viewed in. */
      language?: string;
      /**
       * The high-level, or primary, reason that the content is abusive. The value
       * is an abuse report reason ID.
       */
      reasonId?: string;
      /**
       * The specific, or secondary, reason that this content is abusive (if
       * available). The value is an abuse report reason ID that is a valid
       * secondary reason for the primary reason.
       */
      secondaryReasonId?: string;
      /** The ID that YouTube uses to uniquely identify the video. */
      videoId?: string;
    }
    interface VideoAbuseReportReason {
      /** Etag of this resource. */
      etag?: string;
      /** The ID of this abuse report reason. */
      id?: string;
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * `"youtube#videoAbuseReportReason"`.
       */
      kind?: string;
      /** The `snippet` object contains basic details about the abuse report reason. */
      snippet?: VideoAbuseReportReasonSnippet;
    }
    interface VideoAbuseReportReasonListResponse {
      /** Etag of this resource. */
      etag?: string;
      /** Serialized EventId of the request which produced this response. */
      eventId?: string;
      /** A list of valid abuse reasons that are used with `video.ReportAbuse`. */
      items?: VideoAbuseReportReason[];
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * `"youtube#videoAbuseReportReasonListResponse"`.
       */
      kind?: string;
      /** The `visitorId` identifies the visitor. */
      visitorId?: string;
    }
    interface VideoAbuseReportReasonSnippet {
      /** The localized label belonging to this abuse report reason. */
      label?: string;
      /**
       * The secondary reasons associated with this reason, if any are available.
       * (There might be 0 or more.)
       */
      secondaryReasons?: VideoAbuseReportSecondaryReason[];
    }
    interface VideoAbuseReportSecondaryReason {
      /** The ID of this abuse report secondary reason. */
      id?: string;
      /** The localized label for this abuse report secondary reason. */
      label?: string;
    }
    interface VideoAgeGating {
      /**
       * Indicates whether or not the video has alcoholic beverage content. Only
       * users of legal purchasing age in a particular country, as identified by
       * ICAP, can view the content.
       */
      alcoholContent?: boolean;
      /**
       * Age-restricted trailers. For redband trailers and adult-rated video-games.
       * Only users aged 18+ can view the content. The the field is
       * <code>true</code> the content is restricted to viewers aged 18+. Otherwise
       * The field won't be present.
       */
      restricted?: boolean;
      /** Video game rating, if any. */
      videoGameRating?: string;
    }
    interface VideoCategory {
      /** Etag of this resource. */
      etag?: string;
      /** The ID that YouTube uses to uniquely identify the video category. */
      id?: string;
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#videoCategory"</code>.
       */
      kind?: string;
      /**
       * The <code>snippet</code> object contains basic details about the video
       * category, including its title.
       */
      snippet?: VideoCategorySnippet;
    }
    interface VideoCategoryListResponse {
      /** Etag of this resource. */
      etag?: string;
      /** Serialized EventId of the request which produced this response. */
      eventId?: string;
      /**
       * A list of video categories that can be associated with YouTube videos. In
       * this map, the video category ID is the map key, and its value is the
       * corresponding <code>videoCategory</code> resource.
       */
      items?: VideoCategory[];
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#videoCategoryListResponse"</code>.
       */
      kind?: string;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the next page in the result set.
       */
      nextPageToken?: string;
      /** General pagination information. */
      pageInfo?: PageInfo;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the previous page in the result set.
       */
      prevPageToken?: string;
      tokenPagination?: any;
      /** The <code>visitorId</code> identifies the visitor. */
      visitorId?: string;
    }
    interface VideoCategorySnippet {
      assignable?: boolean;
      /** The YouTube channel that created the video category. */
      channelId?: string;
      /** The video category's title. */
      title?: string;
    }
    interface VideoContentDetails {
      /**
       * The value of <code>captions</code> indicates whether the video
       * has captions or not.
       */
      caption?: string;
      /** Specifies the ratings that the video received under various rating schemes. */
      contentRating?: ContentRating;
      /**
       * The <code>countryRestriction</code> object contains information about the
       * countries where a video is (or is not) viewable.
       */
      countryRestriction?: AccessPolicy;
      /**
       * The value of <code>definition</code> indicates whether the video is
       * available in high definition or only in standard definition.
       */
      definition?: string;
      /**
       * The value of <code>dimension</code> indicates whether the video is
       * available in 3D or in 2D.
       */
      dimension?: string;
      /**
       * The length of the video. The tag value is an <a
       * href="//en.wikipedia.org/wiki/ISO_8601#Durations">ISO 8601</a> duration in
       * the format <code>PT#M#S</code>, in which the letters <code>PT</code>
       * indicate that the value specifies a period of time, and the letters
       * <code>M</code> and <code>S</code> refer to length in minutes and seconds,
       * respectively. The <code>#</code> characters preceding the <code>M</code>
       * and <code>S</code> letters are both integers that specify the number of
       * minutes (or seconds) of the video. For example, a value of
       * <code>PT15M51S</code> indicates that the video is 15 minutes and 51 seconds
       * long.
       */
      duration?: string;
      /**
       * Indicates whether the video uploader has provided a custom
       * thumbnail image for the video.
       * This property is only visible to the video uploader.
       */
      hasCustomThumbnail?: boolean;
      /**
       * The value of <code>is_license_content</code> indicates whether the video is
       * licensed content.
       */
      licensedContent?: boolean;
      /** Specifies the projection format of the video. */
      projection?: string;
      /**
       * The <code>regionRestriction</code> object contains information about the
       * countries where a video is (or is not) viewable. The object will contain
       * either the <code>contentDetails.regionRestriction.allowed</code> property
       * or the <code>contentDetails.regionRestriction.blocked</code> property.
       */
      regionRestriction?: VideoContentDetailsRegionRestriction;
    }
    interface VideoContentDetailsRegionRestriction {
      /**
       * A list of region codes that identify countries where the video is
       * viewable. If this property is present and a country is not listed
       * in its value, then the video is blocked from appearing in that
       * country. If this property is present and contains an empty list,
       * the video is blocked in all countries.
       */
      allowed?: string[];
      /**
       * A list of region codes that identify countries where the video is
       * blocked. If this property is present and a country is not listed in
       * its value, then the video is viewable in that country. If this
       * property is present and contains an empty list, the video is
       * viewable in all countries.
       */
      blocked?: string[];
    }
    interface VideoFileDetails {
      /**
       * A list of audio streams contained in the uploaded video file. Each item
       * in the list contains detailed metadata about an audio stream.
       */
      audioStreams?: VideoFileDetailsAudioStream[];
      /**
       * The uploaded video file's combined (video and audio) bitrate in bits
       * per second.
       */
      bitrateBps?: string;
      /** The uploaded video file's container format. */
      container?: string;
      /**
       * The date and time when the uploaded video file was created. The value is
       * specified in <a href="http://www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * format. Currently, the following ISO 8601 formats are supported:
       * <ul>
       * <li>Date only: <code>YYYY-MM-DD</code></li>
       * <li>Naive time: <code>YYYY-MM-DDTHH:MM:SS</code></li>
       * <li>Time with timezone: <code>YYYY-MM-DDTHH:MM:SS+HH:MM</code></li>
       * </ul>
       */
      creationTime?: string;
      /** The length of the uploaded video in milliseconds. */
      durationMs?: string;
      /**
       * The uploaded file's name. This field is present whether a video file or
       * another type of file was uploaded.
       */
      fileName?: string;
      /**
       * The uploaded file's size in bytes. This field is present whether
       * a video file or another type of file was uploaded.
       */
      fileSize?: string;
      /**
       * The uploaded file's type as detected by YouTube's video processing
       * engine. Currently, YouTube only processes video files, but this field
       * is present whether a video file or another type of file was uploaded.
       */
      fileType?: string;
      /**
       * A list of video streams contained in the uploaded video file. Each item
       * in the list contains detailed metadata about a video stream.
       */
      videoStreams?: VideoFileDetailsVideoStream[];
    }
    interface VideoFileDetailsAudioStream {
      /** The audio stream's bitrate, in bits per second. */
      bitrateBps?: string;
      /** The number of audio channels that the stream contains. */
      channelCount?: number;
      /** The audio codec that the stream uses. */
      codec?: string;
      /**
       * A value that uniquely identifies a video vendor. Typically, the value
       * is a four-letter vendor code.
       */
      vendor?: string;
    }
    interface VideoFileDetailsVideoStream {
      /**
       * The video content's display aspect ratio, which specifies the aspect
       * ratio in which the video should be displayed.
       */
      aspectRatio?: number;
      /** The video stream's bitrate, in bits per second. */
      bitrateBps?: string;
      /** The video codec that the stream uses. */
      codec?: string;
      /** The video stream's frame rate, in frames per second. */
      frameRateFps?: number;
      /** The encoded video content's height in pixels. */
      heightPixels?: number;
      /**
       * The amount that YouTube needs to rotate the original source content
       * to properly display the video.
       */
      rotation?: string;
      /**
       * A value that uniquely identifies a video vendor. Typically, the value is
       * a four-letter vendor code.
       */
      vendor?: string;
      /**
       * The encoded video content's width in pixels. You can calculate the
       * video's encoding aspect ratio as
       * <code>width_pixels</code>&nbsp;/&nbsp;<code>height_pixels</code>.
       */
      widthPixels?: number;
    }
    interface VideoListResponse {
      /** Etag of this resource. */
      etag?: string;
      /** Serialized EventId of the request which produced this response. */
      eventId?: string;
      items?: Video[];
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#videoListResponse"</code>.
       */
      kind?: string;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the next page in the result set.
       */
      nextPageToken?: string;
      /** General pagination information. */
      pageInfo?: PageInfo;
      /**
       * The token that can be used as the value of the <code>pageToken</code>
       * parameter to retrieve the previous page in the result set.
       */
      prevPageToken?: string;
      tokenPagination?: any;
      /** The <code>visitorId</code> identifies the visitor. */
      visitorId?: string;
    }
    interface VideoLiveStreamingDetails {
      /**
       * The ID of the currently active live chat attached to this video. This
       * field is filled only if the video is a currently live broadcast that has
       * live chat. Once the broadcast transitions to complete this field will be
       * removed and the live chat closed down. For persistent broadcasts that live
       * chat id will no longer be tied to this video but rather to the new video
       * being displayed at the persistent page.
       */
      activeLiveChatId?: string;
      /**
       * The time that the broadcast actually ended. The value is specified
       * in <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * format. This value will not be
       * available until the broadcast is over.
       */
      actualEndTime?: string;
      /**
       * The time that the broadcast actually started. The value is specified
       * in <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * format. This value will not be
       * available until the broadcast begins.
       */
      actualStartTime?: string;
      /**
       * The number of viewers currently watching the broadcast. The property and
       * its value will be present if the broadcast has current viewers and the
       * broadcast owner has not hidden the viewcount for the video. Note that
       * YouTube stops tracking the number of concurrent viewers for a broadcast
       * when the broadcast ends. So, this property would not identify the number
       * of viewers watching an archived video of a live broadcast that already
       * ended.
       */
      concurrentViewers?: string;
      /**
       * The time that the broadcast is scheduled to end. The value is specified
       * in <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * format. If the value is empty or
       * the property is not present, then the broadcast is scheduled to continue
       * indefinitely.
       */
      scheduledEndTime?: string;
      /**
       * The time that the broadcast is scheduled to begin. The value is specified
       * in <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * format.
       */
      scheduledStartTime?: string;
    }
    interface VideoLocalization {
      /** Localized version of the video's description. */
      description?: string;
      /** Localized version of the video's title. */
      title?: string;
    }
    interface VideoMonetizationDetails {
      /**
       * The value of <code>access</code> indicates whether the video can be
       * monetized or not.
       */
      access?: AccessPolicy;
    }
    interface VideoPlayer {
      embedHeight?: string;
      /**
       * An <code>&lt;iframe&gt;</code> tag that embeds a player that will
       * play the video.
       */
      embedHtml?: string;
      /** The embed width */
      embedWidth?: string;
    }
    interface VideoProcessingDetails {
      /**
       * This value indicates whether video editing suggestions, which might
       * improve video quality or the playback experience, are available for
       * the video. You can retrieve these suggestions by requesting the
       * <code>suggestions</code> part in your <code>videos.list()</code> request.
       */
      editorSuggestionsAvailability?: string;
      /**
       * This value indicates whether file details are available for the uploaded
       * video. You can retrieve a video's file details by requesting the
       * <code>fileDetails</code> part in your <code>videos.list()</code> request.
       */
      fileDetailsAvailability?: string;
      /**
       * The reason that YouTube failed to process the video. This property will
       * only have a value if the <code>processingStatus</code>
       * property's value is <code>failed</code>.
       */
      processingFailureReason?: string;
      /**
       * This value indicates whether the video processing engine has generated
       * suggestions that might improve YouTube's ability to process the
       * the video, warnings that explain video processing problems, or
       * errors that cause video processing problems. You can retrieve these
       * suggestions by requesting the <code>suggestions</code> part in your
       * <code>videos.list()</code> request.
       */
      processingIssuesAvailability?: string;
      /**
       * The <code>processingProgress</code> object contains information about the
       * progress YouTube has made in processing the video. The values are really
       * only relevant if the video's processing status is <code>processing</code>.
       */
      processingProgress?: VideoProcessingDetailsProcessingProgress;
      /**
       * The video's processing status. This value indicates whether YouTube was
       * able to process the video or if the video is still being processed.
       */
      processingStatus?: string;
      /**
       * This value indicates whether keyword (tag) suggestions are available for
       * the video. Tags can be added to a video's metadata to make it easier for
       * other users to find the video. You can retrieve these suggestions by
       * requesting the <code>suggestions</code> part in your
       * <code>videos.list()</code> request.
       */
      tagSuggestionsAvailability?: string;
      /**
       * This value indicates whether thumbnail images have been generated for
       * the video.
       */
      thumbnailsAvailability?: string;
    }
    interface VideoProcessingDetailsProcessingProgress {
      /**
       * The number of parts of the video that YouTube has already processed.
       * You can estimate the percentage of the video that YouTube has already
       * processed by calculating:<br>
       * <code>100 &#42; parts_processed / parts_total</code><br><br>
       * Note that since the estimated number of parts could increase without
       * a corresponding increase in the number of parts that have already been
       * processed, it is possible that the calculated progress could
       * periodically decrease while YouTube processes a video.
       */
      partsProcessed?: string;
      /**
       * An estimate of the total number of parts that need to be processed
       * for the video. The number may be updated with more precise estimates
       * while YouTube processes the video.
       */
      partsTotal?: string;
      /**
       * An estimate of the amount of time, in millseconds, that YouTube needs
       * to finish processing the video.
       */
      timeLeftMs?: string;
    }
    interface VideoProjectDetails {
      /** A list of project tags associated with the video during the upload. */
      tags?: string[];
    }
    interface VideoRating {
      /** Rating of a video. */
      rating?: string;
      /** The ID that YouTube uses to uniquely identify the video. */
      videoId?: string;
    }
    interface VideoRatingListResponse {
      /** Etag of this resource. */
      etag?: string;
      /** Serialized EventId of the request which produced this response. */
      eventId?: string;
      /** A list of ratings that match the request criteria. */
      items?: VideoRating[];
      /**
       * Identifies what kind of resource this is. Value: the fixed string
       * <code>"youtube#videoGetRatingResponse"</code>.
       */
      kind?: string;
      /** The <code>visitorId</code> identifies the visitor. */
      visitorId?: string;
    }
    interface VideoRecordingDetails {
      /** The geolocation information associated with the video. */
      location?: GeoPoint;
      /** The text description of the location where the video was recorded. */
      locationDescription?: string;
      /**
       * The date and time when the video was recorded. The value is specified in <a
       * href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * (<code>YYYY-MM-DDThh:mm:ss.sssZ</code>) format.
       */
      recordingDate?: string;
    }
    interface VideoSnippet {
      /**
       * The YouTube <a href="/youtube/v3/docs/videoCategories/list">video
       * category</a> associated with the video.
       */
      categoryId?: string;
      /**
       * The ID that YouTube uses to uniquely identify the channel that the
       * video was uploaded to.
       */
      channelId?: string;
      /** Channel title for the channel that the video belongs to. */
      channelTitle?: string;
      /**
       * The <code>default_audio_language</code> property specifies the language
       * spoken in the video's default audio track.
       */
      defaultAudioLanguage?: string;
      /** The language of the videos's default snippet. */
      defaultLanguage?: string;
      /**
       * The video's description.
       * @mutable youtube.videos.insert youtube.videos.update
       */
      description?: string;
      /**
       * Indicates if the video is an upcoming/active live broadcast.
       * Or it's "none" if the video is not an upcoming/active live broadcast.
       */
      liveBroadcastContent?: string;
      /**
       * Localized snippet selected with the hl parameter. If no such localization
       * exists, this field is populated with the default snippet. (Read-only)
       */
      localized?: VideoLocalization;
      /**
       * The date and time that the video was uploaded. The value is specified
       * in <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * format.
       */
      publishedAt?: string;
      /** A list of keyword tags associated with the video. Tags may contain spaces. */
      tags?: string[];
      /**
       * A map of thumbnail images associated with the video. For each object in the
       * map, the key is the name of the thumbnail image, and the value is an object
       * that contains other information about the thumbnail.
       */
      thumbnails?: ThumbnailDetails;
      /**
       * The video's title.
       * @mutable youtube.videos.insert youtube.videos.update
       */
      title?: string;
    }
    interface VideoStatistics {
      /** The number of comments for the video. */
      commentCount?: string;
      /**
       * The number of users who have indicated that they disliked the video by
       * giving it a negative rating.
       */
      dislikeCount?: string;
      /**
       * The number of users who currently have the video marked as a favorite
       * video.
       */
      favoriteCount?: string;
      /**
       * The number of users who have indicated that they liked the video by
       * giving it a positive rating.
       */
      likeCount?: string;
      /** The number of times the video has been viewed. */
      viewCount?: string;
    }
    interface VideoStatus {
      /**
       * This value indicates if the video can be embedded on another website.
       * @mutable youtube.videos.insert youtube.videos.update
       */
      embeddable?: boolean;
      /**
       * This value explains why a video failed to upload. This property is
       * only present if the <code>uploadStatus</code> property indicates that
       * the upload failed.
       */
      failureReason?: string;
      /**
       * The video's license.
       * @mutable youtube.videos.insert youtube.videos.update
       */
      license?: string;
      madeForKids?: boolean;
      /** The video's privacy status. */
      privacyStatus?: string;
      /**
       * This value indicates if the extended video statistics on the watch page
       * can be viewed by everyone. Note that the view count, likes, etc will still
       * be visible if this is disabled.
       * @mutable youtube.videos.insert youtube.videos.update
       */
      publicStatsViewable?: boolean;
      /**
       * The date and time when the video is scheduled to publish. It can be set
       * only if the privacy status of the video is private. The value is specified
       * in <a href="//www.w3.org/TR/NOTE-datetime">ISO 8601</a>
       * format.
       */
      publishAt?: string;
      /**
       * This value explains why YouTube rejected an uploaded video. This
       * property is only present if the <code>uploadStatus</code> property
       * indicates that the upload was rejected.
       */
      rejectionReason?: string;
      selfDeclaredMadeForKids?: boolean;
      /** The status of the uploaded video. */
      uploadStatus?: string;
    }
    interface VideoSuggestions {
      /**
       * A list of video editing operations that might improve the video quality
       * or playback experience of the uploaded video.
       */
      editorSuggestions?: string[];
      /**
       * A list of errors that will prevent YouTube from successfully processing
       * the uploaded video video. These errors indicate that, regardless of the
       * video's current <a href="#processingProgress.processingStatus">processing
       * status</a>, eventually, that status will almost certainly be
       * <code>failed</code>.
       */
      processingErrors?: string[];
      /**
       * A list of suggestions that may improve YouTube's ability to process the
       * video.
       */
      processingHints?: string[];
      /**
       * A list of reasons why YouTube may have difficulty transcoding the
       * uploaded video or that might result in an erroneous transcoding.
       * These warnings are generated before YouTube actually processes the
       * uploaded video file. In addition, they identify issues that are unlikely
       * to cause the video processing to fail but that might cause problems
       * such as sync issues, video artifacts, or a missing audio track.
       */
      processingWarnings?: string[];
      /**
       * A list of keyword tags that could be added to the video's metadata to
       * increase the likelihood that users will locate your video when searching
       * or browsing on YouTube.
       */
      tagSuggestions?: VideoSuggestionsTagSuggestion[];
    }
    interface VideoSuggestionsTagSuggestion {
      /**
       * A set of video categories for which the tag is relevant. You can use this
       * information to display appropriate tag suggestions based on the video
       * category that the video uploader associates with the video. By default,
       * tag suggestions are relevant for all categories if there are no restricts
       * defined for the keyword.
       */
      categoryRestricts?: string[];
      /** The keyword tag suggested for the video. */
      tag?: string;
    }
    interface VideoTopicDetails {
      /**
       * Similar to topic_id, except that these topics are merely relevant to the
       * video. These are topics that may be mentioned in, or appear in the video.
       * You can retrieve information about each topic using <a
       * href="http://wiki.freebase.com/wiki/Topic_API">Freebase Topic API</a>.
       */
      relevantTopicIds?: string[];
      /**
       * A list of Wikipedia URLs that provide a high-level description of the
       * video's content.
       */
      topicCategories?: string[];
      /**
       * A list of Freebase topic IDs that are centrally associated with the video.
       * These are topics that are centrally featured in the video, and it can be
       * said that the video is mainly about each of these. You can retrieve
       * information about each topic using the < a
       * href="http://wiki.freebase.com/wiki/Topic_API">Freebase Topic API</a>.
       */
      topicIds?: string[];
    }
    interface WatchSettings {
      /** The text color for the video watch page's branded area. */
      backgroundColor?: string;
      /**
       * An ID that uniquely identifies a playlist that displays next to the video
       * player.
       */
      featuredPlaylistId?: string;
      /** The background color for the video watch page's branded area. */
      textColor?: string;
    }
    interface ActivitiesResource {
      /** Retrieves a list of resources, possibly filtered. */
      list(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        channelId?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        home?: boolean;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /**
         * The <code><strong>maxResults</strong></code> parameter specifies the
         * maximum number of items that should be returned in the result set.
         */
        maxResults?: number;
        mine?: boolean;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * The <code><strong>pageToken</strong></code> parameter identifies a specific
         * page in the result set that should be returned. In an API response, the
         * <code>nextPageToken</code> and <code>prevPageToken</code> properties
         * identify other pages that could be retrieved.
         */
        pageToken?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies a
         * comma-separated list of one or more <code>activity</code> resource
         * properties that the API response will include.<br><br>If the parameter
         * identifies a property that contains child properties, the child properties
         * will be included in the response. For example, in an <code>activity</code>
         * resource, the <code>snippet</code> property contains other properties that
         * identify the type of activity, a display title for the activity, and so
         * forth. If you set <code><strong>part=snippet</strong></code>, the API
         * response will also contain all of those nested properties.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        publishedAfter?: string;
        publishedBefore?: string;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        regionCode?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<ActivityListResponse>;
    }
    interface CaptionsResource {
      /** Deletes a resource. */
      delete(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        id: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** ID of the Google+ Page for the channel that the request is be on behalf of */
        onBehalfOf?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the request's authorization credentials identify a YouTube CMS user
         * who is acting on behalf of the content owner specified in the parameter
         * value. This parameter is intended for YouTube content partners that own and
         * manage many different YouTube channels. It allows content owners to
         * authenticate once and get access to all their video and channel data,
         * without having to provide authentication credentials for each individual
         * channel. The actual CMS account that the user authenticates with must be
         * linked to the specified YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<void>;
      /** Downloads a caption track. */
      download(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The ID of the caption track to download, required for One Platform. */
        id: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** ID of the Google+ Page for the channel that the request is be on behalf of */
        onBehalfOf?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the request's authorization credentials identify a YouTube CMS user
         * who is acting on behalf of the content owner specified in the parameter
         * value. This parameter is intended for YouTube content partners that own and
         * manage many different YouTube channels. It allows content owners to
         * authenticate once and get access to all their video and channel data,
         * without having to provide authentication credentials for each individual
         * channel. The actual CMS account that the user authenticates with must be
         * linked to the specified YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /**
         * Convert the captions into this format. Supported options are
         * sbv, srt, and vtt.
         */
        tfmt?: string;
        /**
         * tlang is the language code; machine translate the captions into
         * this language.
         */
        tlang?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<void>;
      /** Inserts a new resource into this collection. */
      insert(request: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** ID of the Google+ Page for the channel that the request is be on behalf of */
        onBehalfOf?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the request's authorization credentials identify a YouTube CMS user
         * who is acting on behalf of the content owner specified in the parameter
         * value. This parameter is intended for YouTube content partners that own and
         * manage many different YouTube channels. It allows content owners to
         * authenticate once and get access to all their video and channel data,
         * without having to provide authentication credentials for each individual
         * channel. The actual CMS account that the user authenticates with must be
         * linked to the specified YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies the
         * <code>caption</code> resource parts that the API response will include. Set
         * the parameter value to <code>snippet</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /**
         * Extra parameter to allow automatically syncing the uploaded
         * caption/transcript with the audio.
         */
        sync?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Caption;
      }): HttpRequest<Caption>;
      insert(
        request: {
          /** V1 error format. */
          "$.xgafv"?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** ID of the Google+ Page for the channel that the request is be on behalf of */
          onBehalfOf?: string;
          /**
           * <strong>Note:</strong> This parameter is intended exclusively for YouTube
           * content partners.<br><br>The
           * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
           * that the request's authorization credentials identify a YouTube CMS user
           * who is acting on behalf of the content owner specified in the parameter
           * value. This parameter is intended for YouTube content partners that own and
           * manage many different YouTube channels. It allows content owners to
           * authenticate once and get access to all their video and channel data,
           * without having to provide authentication credentials for each individual
           * channel. The actual CMS account that the user authenticates with must be
           * linked to the specified YouTube content owner.
           */
          onBehalfOfContentOwner?: string;
          /**
           * The <code><strong>part</strong></code> parameter specifies the
           * <code>caption</code> resource parts that the API response will include. Set
           * the parameter value to <code>snippet</code>.
           */
          part: string | string[];
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /**
           * Extra parameter to allow automatically syncing the uploaded
           * caption/transcript with the audio.
           */
          sync?: boolean;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Caption
      ): HttpRequest<Caption>;
      /** Retrieves a list of resources, possibly filtered. */
      list(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Returns the captions with the given IDs for Stubby or Apiary. */
        id?: string | string[];
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** ID of the Google+ Page for the channel that the request is on behalf of. */
        onBehalfOf?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the request's authorization credentials identify a YouTube CMS user
         * who is acting on behalf of the content owner specified in the parameter
         * value. This parameter is intended for YouTube content partners that own and
         * manage many different YouTube channels. It allows content owners to
         * authenticate once and get access to all their video and channel data,
         * without having to provide authentication credentials for each individual
         * channel. The actual CMS account that the user authenticates with must be
         * linked to the specified YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies a
         * comma-separated list of one or more <code>caption</code> resource parts
         * that the API response will include. The <code>part</code> names that you
         * can include in the parameter value are <code>id</code> and
         * <code>snippet</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Returns the captions for the specified video. */
        videoId: string;
      }): HttpRequest<CaptionListResponse>;
      /** Updates an existing resource. */
      update(request: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** ID of the Google+ Page for the channel that the request is on behalf of. */
        onBehalfOf?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the request's authorization credentials identify a YouTube CMS user
         * who is acting on behalf of the content owner specified in the parameter
         * value. This parameter is intended for YouTube content partners that own and
         * manage many different YouTube channels. It allows content owners to
         * authenticate once and get access to all their video and channel data,
         * without having to provide authentication credentials for each individual
         * channel. The actual CMS account that the user authenticates with must be
         * linked to the specified YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies a
         * comma-separated list of one or more <code>caption</code> resource parts
         * that the API response will include. The <code>part</code> names that you
         * can include in the parameter value are <code>id</code> and
         * <code>snippet</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /**
         * Extra parameter to allow automatically syncing the uploaded
         * caption/transcript with the audio.
         */
        sync?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Caption;
      }): HttpRequest<Caption>;
      update(
        request: {
          /** V1 error format. */
          "$.xgafv"?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** ID of the Google+ Page for the channel that the request is on behalf of. */
          onBehalfOf?: string;
          /**
           * <strong>Note:</strong> This parameter is intended exclusively for YouTube
           * content partners.<br><br>The
           * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
           * that the request's authorization credentials identify a YouTube CMS user
           * who is acting on behalf of the content owner specified in the parameter
           * value. This parameter is intended for YouTube content partners that own and
           * manage many different YouTube channels. It allows content owners to
           * authenticate once and get access to all their video and channel data,
           * without having to provide authentication credentials for each individual
           * channel. The actual CMS account that the user authenticates with must be
           * linked to the specified YouTube content owner.
           */
          onBehalfOfContentOwner?: string;
          /**
           * The <code><strong>part</strong></code> parameter specifies a
           * comma-separated list of one or more <code>caption</code> resource parts
           * that the API response will include. The <code>part</code> names that you
           * can include in the parameter value are <code>id</code> and
           * <code>snippet</code>.
           */
          part: string | string[];
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /**
           * Extra parameter to allow automatically syncing the uploaded
           * caption/transcript with the audio.
           */
          sync?: boolean;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Caption
      ): HttpRequest<Caption>;
    }
    interface ChannelBannersResource {
      /** Inserts a new resource into this collection. */
      insert(request: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /**
         * Unused, channel_id is currently derived from the security context of the
         * requestor.
         */
        channelId?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the request's authorization credentials identify a YouTube CMS user
         * who is acting on behalf of the content owner specified in the parameter
         * value. This parameter is intended for YouTube content partners that own and
         * manage many different YouTube channels. It allows content owners to
         * authenticate once and get access to all their video and channel data,
         * without having to provide authentication credentials for each individual
         * channel. The actual CMS account that the user authenticates with must be
         * linked to the specified YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * This parameter can only be used in a properly <a
         * href="/youtube/v3/guides/authentication">authorized request</a>.
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter
         * specifies the YouTube channel ID of the channel to which a video is being
         * added. This parameter is required when a request specifies a value for the
         * <code>onBehalfOfContentOwner</code> parameter, and it can only be used in
         * conjunction with that parameter. In addition, the request must be
         * authorized using a CMS account that is linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies. Finally, the
         * channel that the <code>onBehalfOfContentOwnerChannel</code> parameter value
         * specifies must be linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This
         * parameter is intended for YouTube content partners that own and manage many
         * different YouTube channels. It allows content owners to authenticate once
         * and perform actions on behalf of the channel specified in the parameter
         * value, without having to provide authentication credentials for each
         * separate channel.
         */
        onBehalfOfContentOwnerChannel?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: ChannelBannerResource;
      }): HttpRequest<ChannelBannerResource>;
      insert(
        request: {
          /** V1 error format. */
          "$.xgafv"?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /**
           * Unused, channel_id is currently derived from the security context of the
           * requestor.
           */
          channelId?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /**
           * <strong>Note:</strong> This parameter is intended exclusively for YouTube
           * content partners.<br><br>The
           * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
           * that the request's authorization credentials identify a YouTube CMS user
           * who is acting on behalf of the content owner specified in the parameter
           * value. This parameter is intended for YouTube content partners that own and
           * manage many different YouTube channels. It allows content owners to
           * authenticate once and get access to all their video and channel data,
           * without having to provide authentication credentials for each individual
           * channel. The actual CMS account that the user authenticates with must be
           * linked to the specified YouTube content owner.
           */
          onBehalfOfContentOwner?: string;
          /**
           * This parameter can only be used in a properly <a
           * href="/youtube/v3/guides/authentication">authorized request</a>.
           * <strong>Note:</strong> This parameter is intended exclusively for YouTube
           * content partners.<br><br>The
           * <code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter
           * specifies the YouTube channel ID of the channel to which a video is being
           * added. This parameter is required when a request specifies a value for the
           * <code>onBehalfOfContentOwner</code> parameter, and it can only be used in
           * conjunction with that parameter. In addition, the request must be
           * authorized using a CMS account that is linked to the content owner that the
           * <code>onBehalfOfContentOwner</code> parameter specifies. Finally, the
           * channel that the <code>onBehalfOfContentOwnerChannel</code> parameter value
           * specifies must be linked to the content owner that the
           * <code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This
           * parameter is intended for YouTube content partners that own and manage many
           * different YouTube channels. It allows content owners to authenticate once
           * and perform actions on behalf of the channel specified in the parameter
           * value, without having to provide authentication credentials for each
           * separate channel.
           */
          onBehalfOfContentOwnerChannel?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: ChannelBannerResource
      ): HttpRequest<ChannelBannerResource>;
    }
    interface ChannelsResource {
      /** Retrieves a list of resources, possibly filtered. */
      list(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Return the channels within the specified guide category ID. */
        categoryId?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Return the channel associated with a YouTube username. */
        forUsername?: string;
        /**
         * Stands for "host language". Specifies the localization language of the
         * metadata to be filled into snippet.localized. The field is filled with the
         * default metadata if there is no localization in the specified language.
         * The parameter value must be a language code included in the list returned
         * by the i18nLanguages.list method (e.g. en_US, es_MX).
         */
        hl?: string;
        /** Return the channels with the specified IDs. */
        id?: string | string[];
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Return the channels managed by the authenticated user. */
        managedByMe?: boolean;
        /**
         * The <code><strong>maxResults</strong></code> parameter specifies the
         * maximum number of items that should be returned in the result set.
         */
        maxResults?: number;
        /** Return the ids of channels owned by the authenticated user. */
        mine?: boolean;
        /** Return the channels subscribed to the authenticated user */
        mySubscribers?: boolean;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * The <code><strong>pageToken</strong></code> parameter identifies a specific
         * page in the result set that should be returned. In an API response, the
         * <code>nextPageToken</code> and <code>prevPageToken</code> properties
         * identify other pages that could be retrieved.
         */
        pageToken?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies a
         * comma-separated list of one or more <code>channel</code> resource
         * properties that the API response will include.<br><br>If the parameter
         * identifies a property that contains child properties, the child properties
         * will be included in the response. For example, in a <code>channel</code>
         * resource, the <code>contentDetails</code> property contains other
         * properties, such as the <code>uploads</code> properties. As such, if you
         * set <code><strong>part=contentDetails</strong></code>, the API response
         * will also contain all of those nested properties.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<ChannelListResponse>;
      /** Updates an existing resource. */
      update(request: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * The <code><strong>onBehalfOfContentOwner</strong></code> parameter
         * indicates that the authenticated user is acting on behalf of the content
         * owner specified in the parameter value. This parameter is intended for
         * YouTube content partners that own and manage many different YouTube
         * channels. It allows content owners to authenticate once and get access to
         * all their video and channel data, without having to provide authentication
         * credentials for each individual channel. The actual CMS account that the
         * user authenticates with needs to be linked to the specified YouTube content
         * owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * The <code><strong>part</strong></code> parameter serves two purposes in
         * this operation. It identifies the properties that the write operation will
         * set as well as the properties that the API response will
         * include.<br/><br/>The API currently only allows the parameter value to be
         * set to either <code>brandingSettings</code> or
         * <code>invideoPromotion</code>. (You cannot update both of those parts with
         * a single request.)<br/><br/>Note that this method overrides the existing
         * values for all of the mutable properties that are contained in any parts
         * that the parameter value specifies.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Channel;
      }): HttpRequest<Channel>;
      update(
        request: {
          /** V1 error format. */
          "$.xgafv"?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /**
           * The <code><strong>onBehalfOfContentOwner</strong></code> parameter
           * indicates that the authenticated user is acting on behalf of the content
           * owner specified in the parameter value. This parameter is intended for
           * YouTube content partners that own and manage many different YouTube
           * channels. It allows content owners to authenticate once and get access to
           * all their video and channel data, without having to provide authentication
           * credentials for each individual channel. The actual CMS account that the
           * user authenticates with needs to be linked to the specified YouTube content
           * owner.
           */
          onBehalfOfContentOwner?: string;
          /**
           * The <code><strong>part</strong></code> parameter serves two purposes in
           * this operation. It identifies the properties that the write operation will
           * set as well as the properties that the API response will
           * include.<br/><br/>The API currently only allows the parameter value to be
           * set to either <code>brandingSettings</code> or
           * <code>invideoPromotion</code>. (You cannot update both of those parts with
           * a single request.)<br/><br/>Note that this method overrides the existing
           * values for all of the mutable properties that are contained in any parts
           * that the parameter value specifies.
           */
          part: string | string[];
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Channel
      ): HttpRequest<Channel>;
    }
    interface ChannelSectionsResource {
      /** Deletes a resource. */
      delete(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        id: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<void>;
      /** Inserts a new resource into this collection. */
      insert(request: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * This parameter can only be used in a properly <a
         * href="/youtube/v3/guides/authentication">authorized request</a>.
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter
         * specifies the YouTube channel ID of the channel to which a video is being
         * added. This parameter is required when a request specifies a value for the
         * <code>onBehalfOfContentOwner</code> parameter, and it can only be used in
         * conjunction with that parameter. In addition, the request must be
         * authorized using a CMS account that is linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies. Finally, the
         * channel that the <code>onBehalfOfContentOwnerChannel</code> parameter value
         * specifies must be linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This
         * parameter is intended for YouTube content partners that own and manage many
         * different YouTube channels. It allows content owners to authenticate once
         * and perform actions on behalf of the channel specified in the parameter
         * value, without having to provide authentication credentials for each
         * separate channel.
         */
        onBehalfOfContentOwnerChannel?: string;
        /**
         * The <code><strong>part</strong></code> parameter serves two purposes in
         * this operation. It identifies the properties that the write operation will
         * set as well as the properties that the API response will
         * include.<br/><br/>The <code>part</code> names that you can include in the
         * parameter value are <code>snippet</code> and <code>contentDetails</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: ChannelSection;
      }): HttpRequest<ChannelSection>;
      insert(
        request: {
          /** V1 error format. */
          "$.xgafv"?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /**
           * <strong>Note:</strong> This parameter is intended exclusively for YouTube
           * content partners.<br><br>The
           * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
           * that the
           * request's authorization credentials identify a YouTube CMS user who is
           * acting on behalf of the content owner specified in the parameter value.
           * This parameter is intended for YouTube content partners that own and manage
           * many different YouTube channels. It allows content owners to authenticate
           * once and get access to all their video and channel data, without having to
           * provide authentication credentials for each individual channel. The CMS
           * account that the user authenticates with must be linked to the specified
           * YouTube content owner.
           */
          onBehalfOfContentOwner?: string;
          /**
           * This parameter can only be used in a properly <a
           * href="/youtube/v3/guides/authentication">authorized request</a>.
           * <strong>Note:</strong> This parameter is intended exclusively for YouTube
           * content partners.<br><br>The
           * <code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter
           * specifies the YouTube channel ID of the channel to which a video is being
           * added. This parameter is required when a request specifies a value for the
           * <code>onBehalfOfContentOwner</code> parameter, and it can only be used in
           * conjunction with that parameter. In addition, the request must be
           * authorized using a CMS account that is linked to the content owner that the
           * <code>onBehalfOfContentOwner</code> parameter specifies. Finally, the
           * channel that the <code>onBehalfOfContentOwnerChannel</code> parameter value
           * specifies must be linked to the content owner that the
           * <code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This
           * parameter is intended for YouTube content partners that own and manage many
           * different YouTube channels. It allows content owners to authenticate once
           * and perform actions on behalf of the channel specified in the parameter
           * value, without having to provide authentication credentials for each
           * separate channel.
           */
          onBehalfOfContentOwnerChannel?: string;
          /**
           * The <code><strong>part</strong></code> parameter serves two purposes in
           * this operation. It identifies the properties that the write operation will
           * set as well as the properties that the API response will
           * include.<br/><br/>The <code>part</code> names that you can include in the
           * parameter value are <code>snippet</code> and <code>contentDetails</code>.
           */
          part: string | string[];
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: ChannelSection
      ): HttpRequest<ChannelSection>;
      /** Retrieves a list of resources, possibly filtered. */
      list(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Return the ChannelSections owned by the specified channel ID. */
        channelId?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Return content in specified language */
        hl?: string;
        /** Return the ChannelSections with the given IDs for Stubby or Apiary. */
        id?: string | string[];
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Return the ChannelSections owned by the authenticated user. */
        mine?: boolean;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies a
         * comma-separated list of one or more <code>channelSection</code> resource
         * properties that the API response will include. The <code>part</code> names
         * that you can include in the parameter value are <code>id</code>,
         * <code>snippet</code>, and <code>contentDetails</code>.<br><br>If the
         * parameter identifies a property that contains child properties, the child
         * properties will be included in the response. For example, in a
         * <code>channelSection</code> resource, the <code>snippet</code> property
         * contains other properties, such as a display title for the channelSection.
         * If you set <code><strong>part=snippet</strong></code>, the API response
         * will also contain all of those nested properties.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<ChannelSectionListResponse>;
      /** Updates an existing resource. */
      update(request: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * The <code><strong>part</strong></code> parameter serves two purposes in
         * this operation. It identifies the properties that the write operation will
         * set as well as the properties that the API response will
         * include.<br/><br/>The <code>part</code> names that you can include in the
         * parameter value are <code>snippet</code> and <code>contentDetails</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: ChannelSection;
      }): HttpRequest<ChannelSection>;
      update(
        request: {
          /** V1 error format. */
          "$.xgafv"?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /**
           * <strong>Note:</strong> This parameter is intended exclusively for YouTube
           * content partners.<br><br>The
           * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
           * that the
           * request's authorization credentials identify a YouTube CMS user who is
           * acting on behalf of the content owner specified in the parameter value.
           * This parameter is intended for YouTube content partners that own and manage
           * many different YouTube channels. It allows content owners to authenticate
           * once and get access to all their video and channel data, without having to
           * provide authentication credentials for each individual channel. The CMS
           * account that the user authenticates with must be linked to the specified
           * YouTube content owner.
           */
          onBehalfOfContentOwner?: string;
          /**
           * The <code><strong>part</strong></code> parameter serves two purposes in
           * this operation. It identifies the properties that the write operation will
           * set as well as the properties that the API response will
           * include.<br/><br/>The <code>part</code> names that you can include in the
           * parameter value are <code>snippet</code> and <code>contentDetails</code>.
           */
          part: string | string[];
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: ChannelSection
      ): HttpRequest<ChannelSection>;
    }
    interface CommentsResource {
      /** Deletes a resource. */
      delete(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        id: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<void>;
      /** Inserts a new resource into this collection. */
      insert(request: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * The <code><strong>part</strong></code> parameter identifies the properties
         * that the API response will include. Set the parameter value to
         * <code>snippet</code>. The <code>snippet</code> part has a quota cost of 2
         * units.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Comment;
      }): HttpRequest<Comment>;
      insert(
        request: {
          /** V1 error format. */
          "$.xgafv"?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /**
           * The <code><strong>part</strong></code> parameter identifies the properties
           * that the API response will include. Set the parameter value to
           * <code>snippet</code>. The <code>snippet</code> part has a quota cost of 2
           * units.
           */
          part: string | string[];
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Comment
      ): HttpRequest<Comment>;
      /** Retrieves a list of resources, possibly filtered. */
      list(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Returns the comments with the given IDs for One Platform. */
        id?: string | string[];
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /**
         * The <code><strong>maxResults</strong></code> parameter specifies the
         * maximum number of items that should be returned in the result set.
         */
        maxResults?: number;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * The <code><strong>pageToken</strong></code> parameter identifies a specific
         * page in the result set that should be returned. In an API response, the
         * <code>nextPageToken</code> and <code>prevPageToken</code> properties
         * identify other pages that could be retrieved.
         */
        pageToken?: string;
        /**
         * Returns replies to the specified comment.
         * Note, currently YouTube features only one level of replies (ie replies
         * to top level comments). However replies to replies may be supported in
         * the future.
         */
        parentId?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies a
         * comma-separated list of one or more <code>comment</code> resource
         * properties that the API response will include.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** The requested text format for the returned comments. */
        textFormat?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<CommentListResponse>;
      /**
       * Expresses the caller's opinion that one or more comments should be flagged
       * as spam.
       */
      markAsSpam(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Flags the comments with the given IDs as spam in the caller's opinion. */
        id: string | string[];
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<void>;
      /** Sets the moderation status of one or more comments. */
      setModerationStatus(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /**
         * If set to true the author of the comment gets added to the ban list.
         * This means all future comments of the author will autmomatically be
         * rejected.
         * Only valid in combination with STATUS_REJECTED.
         */
        banAuthor?: boolean;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Modifies the moderation status of the comments with the given IDs */
        id: string | string[];
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /**
         * Specifies the requested moderation status. Note, comments can be in
         * statuses, which are not available through this call. For example, this
         * call does not allow to mark a comment as 'likely spam'.
         * Valid values: MODERATION_STATUS_PUBLISHED,
         * MODERATION_STATUS_HELD_FOR_REVIEW, MODERATION_STATUS_REJECTED.
         */
        moderationStatus: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<void>;
      /** Updates an existing resource. */
      update(request: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * The <code><strong>part</strong></code> parameter identifies the properties
         * that the API response will include. You must at least include the
         * <code>snippet</code> part in the parameter value since that part contains
         * all of the properties that the API request can update.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Comment;
      }): HttpRequest<Comment>;
      update(
        request: {
          /** V1 error format. */
          "$.xgafv"?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /**
           * The <code><strong>part</strong></code> parameter identifies the properties
           * that the API response will include. You must at least include the
           * <code>snippet</code> part in the parameter value since that part contains
           * all of the properties that the API request can update.
           */
          part: string | string[];
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Comment
      ): HttpRequest<Comment>;
    }
    interface CommentThreadsResource {
      /** Inserts a new resource into this collection. */
      insert(request: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * The <code><strong>part</strong></code> parameter identifies the properties
         * that the API response will include. Set the parameter value to
         * <code>snippet</code>. The <code>snippet</code> part has a quota cost of 2
         * units.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: CommentThread;
      }): HttpRequest<CommentThread>;
      insert(
        request: {
          /** V1 error format. */
          "$.xgafv"?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /**
           * The <code><strong>part</strong></code> parameter identifies the properties
           * that the API response will include. Set the parameter value to
           * <code>snippet</code>. The <code>snippet</code> part has a quota cost of 2
           * units.
           */
          part: string | string[];
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: CommentThread
      ): HttpRequest<CommentThread>;
      /** Retrieves a list of resources, possibly filtered. */
      list(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /**
         * Returns the comment threads of all videos of the channel and the
         * channel comments as well.
         */
        allThreadsRelatedToChannelId?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /**
         * Returns the comment threads for all the channel comments (ie does not
         * include comments left on videos).
         */
        channelId?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Returns the comment threads with the given IDs for Stubby or Apiary. */
        id?: string | string[];
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /**
         * The <code><strong>maxResults</strong></code> parameter specifies the
         * maximum number of items that should be returned in the result set.
         */
        maxResults?: number;
        /**
         * Limits the returned comment threads to those with the specified
         * moderation status. Not compatible with the 'id' filter.
         * Valid values: published, heldForReview, likelySpam.
         */
        moderationStatus?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        order?: string;
        /**
         * The <code><strong>pageToken</strong></code> parameter identifies a specific
         * page in the result set that should be returned. In an API response, the
         * <code>nextPageToken</code> and <code>prevPageToken</code> properties
         * identify other pages that could be retrieved.
         */
        pageToken?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies a
         * comma-separated list of one or more <code>commentThread</code> resource
         * properties that the API response will include.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /**
         * Limits the returned comment threads to those matching the specified
         * key words. Not compatible with the 'id' filter.
         */
        searchTerms?: string;
        /** The requested text format for the returned comments. */
        textFormat?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Returns the comment threads of the specified video. */
        videoId?: string;
      }): HttpRequest<CommentThreadListResponse>;
      /** Updates an existing resource. */
      update(request: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies a
         * comma-separated list of <code>commentThread</code> resource properties that
         * the API response will include. You must at least include the
         * <code>snippet</code> part in the parameter value since that part contains
         * all of the properties that the API request can update.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: CommentThread;
      }): HttpRequest<CommentThread>;
      update(
        request: {
          /** V1 error format. */
          "$.xgafv"?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /**
           * The <code><strong>part</strong></code> parameter specifies a
           * comma-separated list of <code>commentThread</code> resource properties that
           * the API response will include. You must at least include the
           * <code>snippet</code> part in the parameter value since that part contains
           * all of the properties that the API request can update.
           */
          part: string | string[];
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: CommentThread
      ): HttpRequest<CommentThread>;
    }
    interface GuideCategoriesResource {
      /** Retrieves a list of guide categories. */
      list(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        hl?: string;
        /** Return the guide categories with the given IDs. */
        id?: string | string[];
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies the
         * <code>guideCategory</code> resource properties that the API response will
         * include. Set the parameter value to <code>snippet</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Return all categories in the given region code. */
        regionCode?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<GuideCategoryListResponse>;
    }
    // tslint:disable-next-line:interface-name
    interface I18nLanguagesResource {
      /** Retrieves a list of resources, possibly filtered. */
      list(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        hl?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies the
         * <code>i18nLanguage</code> resource properties that the API response will
         * include. Set the parameter value to <code>snippet</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<I18nLanguageListResponse>;
    }
    // tslint:disable-next-line:interface-name
    interface I18nRegionsResource {
      /** Retrieves a list of resources, possibly filtered. */
      list(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        hl?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies the
         * <code>i18nRegion</code> resource properties that the API response will
         * include. Set the parameter value to <code>snippet</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<I18nRegionListResponse>;
    }
    interface LiveBroadcastsResource {
      /** Bind a broadcast to a stream. */
      bind(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Broadcast to bind to the stream */
        id: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * This parameter can only be used in a properly <a
         * href="/youtube/v3/guides/authentication">authorized request</a>.
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter
         * specifies the YouTube channel ID of the channel to which a video is being
         * added. This parameter is required when a request specifies a value for the
         * <code>onBehalfOfContentOwner</code> parameter, and it can only be used in
         * conjunction with that parameter. In addition, the request must be
         * authorized using a CMS account that is linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies. Finally, the
         * channel that the <code>onBehalfOfContentOwnerChannel</code> parameter value
         * specifies must be linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This
         * parameter is intended for YouTube content partners that own and manage many
         * different YouTube channels. It allows content owners to authenticate once
         * and perform actions on behalf of the channel specified in the parameter
         * value, without having to provide authentication credentials for each
         * separate channel.
         */
        onBehalfOfContentOwnerChannel?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies a
         * comma-separated list of one or more <code>liveBroadcast</code> resource
         * properties that the API response will include. The <code>part</code> names
         * that you can include in the parameter value are <code>id</code>,
         * <code>snippet</code>, <code>contentDetails</code>, and <code>status</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Stream to bind, if not set unbind the current one. */
        streamId?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<LiveBroadcast>;
      /**
       * Slate and recording control of the live broadcast.
       * Support actions: slate on/off, recording start/stop/pause/resume.
       * Design doc: goto/yt-api-liveBroadcast-control
       */
      control(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Whether display or hide slate. */
        displaySlate?: boolean;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Broadcast to operate. */
        id: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * The exact time when the actions (e.g. slate on) are executed.
         * It is an offset from the first frame of the monitor stream.
         * If not set, it means "now" or ASAP.
         * This field should not be set if the monitor stream is disabled,
         * otherwise an error will be returned.
         */
        offsetTimeMs?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * This parameter can only be used in a properly <a
         * href="/youtube/v3/guides/authentication">authorized request</a>.
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter
         * specifies the YouTube channel ID of the channel to which a video is being
         * added. This parameter is required when a request specifies a value for the
         * <code>onBehalfOfContentOwner</code> parameter, and it can only be used in
         * conjunction with that parameter. In addition, the request must be
         * authorized using a CMS account that is linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies. Finally, the
         * channel that the <code>onBehalfOfContentOwnerChannel</code> parameter value
         * specifies must be linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This
         * parameter is intended for YouTube content partners that own and manage many
         * different YouTube channels. It allows content owners to authenticate once
         * and perform actions on behalf of the channel specified in the parameter
         * value, without having to provide authentication credentials for each
         * separate channel.
         */
        onBehalfOfContentOwnerChannel?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies a
         * comma-separated list of one or more <code>liveBroadcast</code> resource
         * properties that the API response will include. The <code>part</code> names
         * that you can include in the parameter value are <code>id</code>,
         * <code>snippet</code>, <code>contentDetails</code>, and <code>status</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /**
         * The wall clock time at which the action should be executed.
         * Only one of offset_time_ms and walltime may be set at a time.
         */
        walltime?: string;
      }): HttpRequest<LiveBroadcast>;
      /** Delete a given broadcast. */
      delete(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        id: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * This parameter can only be used in a properly <a
         * href="/youtube/v3/guides/authentication">authorized request</a>.
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter
         * specifies the YouTube channel ID of the channel to which a video is being
         * added. This parameter is required when a request specifies a value for the
         * <code>onBehalfOfContentOwner</code> parameter, and it can only be used in
         * conjunction with that parameter. In addition, the request must be
         * authorized using a CMS account that is linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies. Finally, the
         * channel that the <code>onBehalfOfContentOwnerChannel</code> parameter value
         * specifies must be linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This
         * parameter is intended for YouTube content partners that own and manage many
         * different YouTube channels. It allows content owners to authenticate once
         * and perform actions on behalf of the channel specified in the parameter
         * value, without having to provide authentication credentials for each
         * separate channel.
         */
        onBehalfOfContentOwnerChannel?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<void>;
      /** Inserts a new stream for the authenticated user. */
      insert(request: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * This parameter can only be used in a properly <a
         * href="/youtube/v3/guides/authentication">authorized request</a>.
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter
         * specifies the YouTube channel ID of the channel to which a video is being
         * added. This parameter is required when a request specifies a value for the
         * <code>onBehalfOfContentOwner</code> parameter, and it can only be used in
         * conjunction with that parameter. In addition, the request must be
         * authorized using a CMS account that is linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies. Finally, the
         * channel that the <code>onBehalfOfContentOwnerChannel</code> parameter value
         * specifies must be linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This
         * parameter is intended for YouTube content partners that own and manage many
         * different YouTube channels. It allows content owners to authenticate once
         * and perform actions on behalf of the channel specified in the parameter
         * value, without having to provide authentication credentials for each
         * separate channel.
         */
        onBehalfOfContentOwnerChannel?: string;
        /**
         * The <code><strong>part</strong></code> parameter serves two purposes in
         * this operation. It identifies the properties that the write operation will
         * set as well as the properties that the API response will
         * include.<br><br>The <code>part</code> properties that you can include in
         * the parameter value are <code>id</code>, <code>snippet</code>,
         * <code>contentDetails</code>, and <code>status</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: LiveBroadcast;
      }): HttpRequest<LiveBroadcast>;
      insert(
        request: {
          /** V1 error format. */
          "$.xgafv"?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /**
           * <strong>Note:</strong> This parameter is intended exclusively for YouTube
           * content partners.<br><br>The
           * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
           * that the
           * request's authorization credentials identify a YouTube CMS user who is
           * acting on behalf of the content owner specified in the parameter value.
           * This parameter is intended for YouTube content partners that own and manage
           * many different YouTube channels. It allows content owners to authenticate
           * once and get access to all their video and channel data, without having to
           * provide authentication credentials for each individual channel. The CMS
           * account that the user authenticates with must be linked to the specified
           * YouTube content owner.
           */
          onBehalfOfContentOwner?: string;
          /**
           * This parameter can only be used in a properly <a
           * href="/youtube/v3/guides/authentication">authorized request</a>.
           * <strong>Note:</strong> This parameter is intended exclusively for YouTube
           * content partners.<br><br>The
           * <code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter
           * specifies the YouTube channel ID of the channel to which a video is being
           * added. This parameter is required when a request specifies a value for the
           * <code>onBehalfOfContentOwner</code> parameter, and it can only be used in
           * conjunction with that parameter. In addition, the request must be
           * authorized using a CMS account that is linked to the content owner that the
           * <code>onBehalfOfContentOwner</code> parameter specifies. Finally, the
           * channel that the <code>onBehalfOfContentOwnerChannel</code> parameter value
           * specifies must be linked to the content owner that the
           * <code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This
           * parameter is intended for YouTube content partners that own and manage many
           * different YouTube channels. It allows content owners to authenticate once
           * and perform actions on behalf of the channel specified in the parameter
           * value, without having to provide authentication credentials for each
           * separate channel.
           */
          onBehalfOfContentOwnerChannel?: string;
          /**
           * The <code><strong>part</strong></code> parameter serves two purposes in
           * this operation. It identifies the properties that the write operation will
           * set as well as the properties that the API response will
           * include.<br><br>The <code>part</code> properties that you can include in
           * the parameter value are <code>id</code>, <code>snippet</code>,
           * <code>contentDetails</code>, and <code>status</code>.
           */
          part: string | string[];
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: LiveBroadcast
      ): HttpRequest<LiveBroadcast>;
      /** Retrieve the list of broadcasts associated with the given channel. */
      list(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** Return broadcasts with a certain status, e.g. active broadcasts. */
        broadcastStatus?: string;
        /** Return only broadcasts with the selected type. */
        broadcastType?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Return broadcasts with the given ids from Stubby or Apiary. */
        id?: string | string[];
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /**
         * The <code><strong>maxResults</strong></code> parameter specifies the
         * maximum number of items that should be returned in the result set.
         */
        maxResults?: number;
        mine?: boolean;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * This parameter can only be used in a properly <a
         * href="/youtube/v3/guides/authentication">authorized request</a>.
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter
         * specifies the YouTube channel ID of the channel to which a video is being
         * added. This parameter is required when a request specifies a value for the
         * <code>onBehalfOfContentOwner</code> parameter, and it can only be used in
         * conjunction with that parameter. In addition, the request must be
         * authorized using a CMS account that is linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies. Finally, the
         * channel that the <code>onBehalfOfContentOwnerChannel</code> parameter value
         * specifies must be linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This
         * parameter is intended for YouTube content partners that own and manage many
         * different YouTube channels. It allows content owners to authenticate once
         * and perform actions on behalf of the channel specified in the parameter
         * value, without having to provide authentication credentials for each
         * separate channel.
         */
        onBehalfOfContentOwnerChannel?: string;
        /**
         * The <code><strong>pageToken</strong></code> parameter identifies a specific
         * page in the result set that should be returned. In an API response, the
         * <code>nextPageToken</code> and <code>prevPageToken</code> properties
         * identify other pages that could be retrieved.
         */
        pageToken?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies a
         * comma-separated list of one or more <code>liveBroadcast</code> resource
         * properties that the API response will include. The <code>part</code> names
         * that you can include in the parameter value are <code>id</code>,
         * <code>snippet</code>, <code>contentDetails</code>, and <code>status</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<LiveBroadcastListResponse>;
      /** Transition a broadcast to a given status. */
      transition(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** The status to which the broadcast is going to transition. */
        broadcastStatus: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Broadcast to transition. */
        id: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * This parameter can only be used in a properly <a
         * href="/youtube/v3/guides/authentication">authorized request</a>.
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter
         * specifies the YouTube channel ID of the channel to which a video is being
         * added. This parameter is required when a request specifies a value for the
         * <code>onBehalfOfContentOwner</code> parameter, and it can only be used in
         * conjunction with that parameter. In addition, the request must be
         * authorized using a CMS account that is linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies. Finally, the
         * channel that the <code>onBehalfOfContentOwnerChannel</code> parameter value
         * specifies must be linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This
         * parameter is intended for YouTube content partners that own and manage many
         * different YouTube channels. It allows content owners to authenticate once
         * and perform actions on behalf of the channel specified in the parameter
         * value, without having to provide authentication credentials for each
         * separate channel.
         */
        onBehalfOfContentOwnerChannel?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies a
         * comma-separated list of one or more <code>liveBroadcast</code> resource
         * properties that the API response will include. The <code>part</code> names
         * that you can include in the parameter value are <code>id</code>,
         * <code>snippet</code>, <code>contentDetails</code>, and <code>status</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<LiveBroadcast>;
      /** Updates an existing broadcast for the authenticated user. */
      update(request: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * This parameter can only be used in a properly <a
         * href="/youtube/v3/guides/authentication">authorized request</a>.
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter
         * specifies the YouTube channel ID of the channel to which a video is being
         * added. This parameter is required when a request specifies a value for the
         * <code>onBehalfOfContentOwner</code> parameter, and it can only be used in
         * conjunction with that parameter. In addition, the request must be
         * authorized using a CMS account that is linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies. Finally, the
         * channel that the <code>onBehalfOfContentOwnerChannel</code> parameter value
         * specifies must be linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This
         * parameter is intended for YouTube content partners that own and manage many
         * different YouTube channels. It allows content owners to authenticate once
         * and perform actions on behalf of the channel specified in the parameter
         * value, without having to provide authentication credentials for each
         * separate channel.
         */
        onBehalfOfContentOwnerChannel?: string;
        /**
         * The <code><strong>part</strong></code> parameter serves two purposes in
         * this operation. It identifies the properties that the write operation will
         * set as well as the properties that the API response will
         * include.<br><br>The <code>part</code> properties that you can include in
         * the parameter value are <code>id</code>, <code>snippet</code>,
         * <code>contentDetails</code>, and <code>status</code>.<br><br>Note that this
         * method will override the existing values for all of the mutable properties
         * that are contained in any parts that the parameter value specifies. For
         * example, a
         * broadcast's privacy status is defined in the <code>status</code> part. As
         * such, if your request is updating a private or unlisted broadcast, and the
         * request's <code>part</code> parameter value includes the
         * <code>status</code> part, the broadcast's privacy setting will be updated
         * to whatever value the request body specifies. If the request body does not
         * specify a value, the existing privacy setting will be removed and the
         * broadcast will revert to the default privacy setting.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: LiveBroadcast;
      }): HttpRequest<LiveBroadcast>;
      update(
        request: {
          /** V1 error format. */
          "$.xgafv"?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /**
           * <strong>Note:</strong> This parameter is intended exclusively for YouTube
           * content partners.<br><br>The
           * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
           * that the
           * request's authorization credentials identify a YouTube CMS user who is
           * acting on behalf of the content owner specified in the parameter value.
           * This parameter is intended for YouTube content partners that own and manage
           * many different YouTube channels. It allows content owners to authenticate
           * once and get access to all their video and channel data, without having to
           * provide authentication credentials for each individual channel. The CMS
           * account that the user authenticates with must be linked to the specified
           * YouTube content owner.
           */
          onBehalfOfContentOwner?: string;
          /**
           * This parameter can only be used in a properly <a
           * href="/youtube/v3/guides/authentication">authorized request</a>.
           * <strong>Note:</strong> This parameter is intended exclusively for YouTube
           * content partners.<br><br>The
           * <code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter
           * specifies the YouTube channel ID of the channel to which a video is being
           * added. This parameter is required when a request specifies a value for the
           * <code>onBehalfOfContentOwner</code> parameter, and it can only be used in
           * conjunction with that parameter. In addition, the request must be
           * authorized using a CMS account that is linked to the content owner that the
           * <code>onBehalfOfContentOwner</code> parameter specifies. Finally, the
           * channel that the <code>onBehalfOfContentOwnerChannel</code> parameter value
           * specifies must be linked to the content owner that the
           * <code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This
           * parameter is intended for YouTube content partners that own and manage many
           * different YouTube channels. It allows content owners to authenticate once
           * and perform actions on behalf of the channel specified in the parameter
           * value, without having to provide authentication credentials for each
           * separate channel.
           */
          onBehalfOfContentOwnerChannel?: string;
          /**
           * The <code><strong>part</strong></code> parameter serves two purposes in
           * this operation. It identifies the properties that the write operation will
           * set as well as the properties that the API response will
           * include.<br><br>The <code>part</code> properties that you can include in
           * the parameter value are <code>id</code>, <code>snippet</code>,
           * <code>contentDetails</code>, and <code>status</code>.<br><br>Note that this
           * method will override the existing values for all of the mutable properties
           * that are contained in any parts that the parameter value specifies. For
           * example, a
           * broadcast's privacy status is defined in the <code>status</code> part. As
           * such, if your request is updating a private or unlisted broadcast, and the
           * request's <code>part</code> parameter value includes the
           * <code>status</code> part, the broadcast's privacy setting will be updated
           * to whatever value the request body specifies. If the request body does not
           * specify a value, the existing privacy setting will be removed and the
           * broadcast will revert to the default privacy setting.
           */
          part: string | string[];
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: LiveBroadcast
      ): HttpRequest<LiveBroadcast>;
    }
    interface LiveChatBansResource {
      /** Deletes a chat ban. */
      delete(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        id: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<void>;
      /** Inserts a new resource into this collection. */
      insert(request: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * The <code><strong>part</strong></code> parameter serves two purposes in
         * this operation. It identifies the properties that the write operation will
         * set as well as the properties that the API response returns. Set the
         * parameter value to <code>snippet</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: LiveChatBan;
      }): HttpRequest<LiveChatBan>;
      insert(
        request: {
          /** V1 error format. */
          "$.xgafv"?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /**
           * The <code><strong>part</strong></code> parameter serves two purposes in
           * this operation. It identifies the properties that the write operation will
           * set as well as the properties that the API response returns. Set the
           * parameter value to <code>snippet</code>.
           */
          part: string | string[];
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: LiveChatBan
      ): HttpRequest<LiveChatBan>;
    }
    interface LiveChatMessagesResource {
      /** Deletes a chat message. */
      delete(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        id: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<void>;
      /** Inserts a new resource into this collection. */
      insert(request: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * The <code><strong>part</strong></code> parameter serves two purposes. It
         * identifies the properties that the write operation will set as well as the
         * properties that the API response will include. Set the parameter value to
         * <code>snippet</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: LiveChatMessage;
      }): HttpRequest<LiveChatMessage>;
      insert(
        request: {
          /** V1 error format. */
          "$.xgafv"?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /**
           * The <code><strong>part</strong></code> parameter serves two purposes. It
           * identifies the properties that the write operation will set as well as the
           * properties that the API response will include. Set the parameter value to
           * <code>snippet</code>.
           */
          part: string | string[];
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: LiveChatMessage
      ): HttpRequest<LiveChatMessage>;
      /** Retrieves a list of resources, possibly filtered. */
      list(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /**
         * Specifies the localization language in which the system messages
         * should be returned.
         */
        hl?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The id of the live chat for which comments should be returned. */
        liveChatId: string;
        /**
         * The <code><strong>maxResults</strong></code> parameter specifies the
         * maximum number of items that should be returned in the result set.
         */
        maxResults?: number;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * The <code><strong>pageToken</strong></code> parameter identifies a specific
         * page in the result set that should be returned. In an API response, the
         * <code>nextPageToken</code> property identify other pages that could be
         * retrieved.
         */
        pageToken?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies the
         * <code>liveChatComment</code> resource parts that the API response will
         * include. Supported values are <code>id</code> and <code>snippet</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /**
         * Specifies the size of the profile image that should be
         * returned for each user.
         */
        profileImageSize?: number;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<LiveChatMessageListResponse>;
    }
    interface LiveChatModeratorsResource {
      /** Deletes a chat moderator. */
      delete(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        id: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<void>;
      /** Inserts a new resource into this collection. */
      insert(request: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * The <code><strong>part</strong></code> parameter serves two purposes in
         * this operation. It identifies the properties that the write operation will
         * set as well as the properties that the API response returns. Set the
         * parameter value to <code>snippet</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: LiveChatModerator;
      }): HttpRequest<LiveChatModerator>;
      insert(
        request: {
          /** V1 error format. */
          "$.xgafv"?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /**
           * The <code><strong>part</strong></code> parameter serves two purposes in
           * this operation. It identifies the properties that the write operation will
           * set as well as the properties that the API response returns. Set the
           * parameter value to <code>snippet</code>.
           */
          part: string | string[];
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: LiveChatModerator
      ): HttpRequest<LiveChatModerator>;
      /** Retrieves a list of resources, possibly filtered. */
      list(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The id of the live chat for which moderators should be returned. */
        liveChatId: string;
        /**
         * The <code><strong>maxResults</strong></code> parameter specifies the
         * maximum number of items that should be returned in the result set.
         */
        maxResults?: number;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * The <code><strong>pageToken</strong></code> parameter identifies a specific
         * page in the result set that should be returned. In an API response, the
         * <code>nextPageToken</code> and <code>prevPageToken</code> properties
         * identify other pages that could be retrieved.
         */
        pageToken?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies the
         * <code>liveChatModerator</code> resource parts that the API response will
         * include. Supported values are <code>id</code> and <code>snippet</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<LiveChatModeratorListResponse>;
    }
    interface LiveStreamsResource {
      /** Deletes an existing stream for the authenticated user. */
      delete(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        id: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * This parameter can only be used in a properly <a
         * href="/youtube/v3/guides/authentication">authorized request</a>.
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter
         * specifies the YouTube channel ID of the channel to which a video is being
         * added. This parameter is required when a request specifies a value for the
         * <code>onBehalfOfContentOwner</code> parameter, and it can only be used in
         * conjunction with that parameter. In addition, the request must be
         * authorized using a CMS account that is linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies. Finally, the
         * channel that the <code>onBehalfOfContentOwnerChannel</code> parameter value
         * specifies must be linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This
         * parameter is intended for YouTube content partners that own and manage many
         * different YouTube channels. It allows content owners to authenticate once
         * and perform actions on behalf of the channel specified in the parameter
         * value, without having to provide authentication credentials for each
         * separate channel.
         */
        onBehalfOfContentOwnerChannel?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<void>;
      /** Inserts a new stream for the authenticated user. */
      insert(request: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * This parameter can only be used in a properly <a
         * href="/youtube/v3/guides/authentication">authorized request</a>.
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter
         * specifies the YouTube channel ID of the channel to which a video is being
         * added. This parameter is required when a request specifies a value for the
         * <code>onBehalfOfContentOwner</code> parameter, and it can only be used in
         * conjunction with that parameter. In addition, the request must be
         * authorized using a CMS account that is linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies. Finally, the
         * channel that the <code>onBehalfOfContentOwnerChannel</code> parameter value
         * specifies must be linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This
         * parameter is intended for YouTube content partners that own and manage many
         * different YouTube channels. It allows content owners to authenticate once
         * and perform actions on behalf of the channel specified in the parameter
         * value, without having to provide authentication credentials for each
         * separate channel.
         */
        onBehalfOfContentOwnerChannel?: string;
        /**
         * The <code><strong>part</strong></code> parameter serves two purposes in
         * this operation. It identifies the properties that the write operation will
         * set as well as the properties that the API response will
         * include.<br><br>The <code>part</code> properties that you can include in
         * the parameter value are <code>id</code>, <code>snippet</code>,
         * <code>cdn</code>, and <code>status</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: LiveStream;
      }): HttpRequest<LiveStream>;
      insert(
        request: {
          /** V1 error format. */
          "$.xgafv"?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /**
           * <strong>Note:</strong> This parameter is intended exclusively for YouTube
           * content partners.<br><br>The
           * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
           * that the
           * request's authorization credentials identify a YouTube CMS user who is
           * acting on behalf of the content owner specified in the parameter value.
           * This parameter is intended for YouTube content partners that own and manage
           * many different YouTube channels. It allows content owners to authenticate
           * once and get access to all their video and channel data, without having to
           * provide authentication credentials for each individual channel. The CMS
           * account that the user authenticates with must be linked to the specified
           * YouTube content owner.
           */
          onBehalfOfContentOwner?: string;
          /**
           * This parameter can only be used in a properly <a
           * href="/youtube/v3/guides/authentication">authorized request</a>.
           * <strong>Note:</strong> This parameter is intended exclusively for YouTube
           * content partners.<br><br>The
           * <code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter
           * specifies the YouTube channel ID of the channel to which a video is being
           * added. This parameter is required when a request specifies a value for the
           * <code>onBehalfOfContentOwner</code> parameter, and it can only be used in
           * conjunction with that parameter. In addition, the request must be
           * authorized using a CMS account that is linked to the content owner that the
           * <code>onBehalfOfContentOwner</code> parameter specifies. Finally, the
           * channel that the <code>onBehalfOfContentOwnerChannel</code> parameter value
           * specifies must be linked to the content owner that the
           * <code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This
           * parameter is intended for YouTube content partners that own and manage many
           * different YouTube channels. It allows content owners to authenticate once
           * and perform actions on behalf of the channel specified in the parameter
           * value, without having to provide authentication credentials for each
           * separate channel.
           */
          onBehalfOfContentOwnerChannel?: string;
          /**
           * The <code><strong>part</strong></code> parameter serves two purposes in
           * this operation. It identifies the properties that the write operation will
           * set as well as the properties that the API response will
           * include.<br><br>The <code>part</code> properties that you can include in
           * the parameter value are <code>id</code>, <code>snippet</code>,
           * <code>cdn</code>, and <code>status</code>.
           */
          part: string | string[];
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: LiveStream
      ): HttpRequest<LiveStream>;
      /** Retrieve the list of streams associated with the given channel. -- */
      list(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Return LiveStreams with the given ids from Stubby or Apiary. */
        id?: string | string[];
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /**
         * The <code><strong>maxResults</strong></code> parameter specifies the
         * maximum number of items that should be returned in the result set.
         */
        maxResults?: number;
        mine?: boolean;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * This parameter can only be used in a properly <a
         * href="/youtube/v3/guides/authentication">authorized request</a>.
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter
         * specifies the YouTube channel ID of the channel to which a video is being
         * added. This parameter is required when a request specifies a value for the
         * <code>onBehalfOfContentOwner</code> parameter, and it can only be used in
         * conjunction with that parameter. In addition, the request must be
         * authorized using a CMS account that is linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies. Finally, the
         * channel that the <code>onBehalfOfContentOwnerChannel</code> parameter value
         * specifies must be linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This
         * parameter is intended for YouTube content partners that own and manage many
         * different YouTube channels. It allows content owners to authenticate once
         * and perform actions on behalf of the channel specified in the parameter
         * value, without having to provide authentication credentials for each
         * separate channel.
         */
        onBehalfOfContentOwnerChannel?: string;
        /**
         * The <code><strong>pageToken</strong></code> parameter identifies a specific
         * page in the result set that should be returned. In an API response, the
         * <code>nextPageToken</code> and <code>prevPageToken</code> properties
         * identify other pages that could be retrieved.
         */
        pageToken?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies a
         * comma-separated list of one or more <code>liveStream</code> resource
         * properties that the API response will include. The <code>part</code> names
         * that you can include in the parameter value are <code>id</code>,
         * <code>snippet</code>, <code>cdn</code>, and <code>status</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<LiveStreamListResponse>;
      /** Updates an existing stream for the authenticated user. */
      update(request: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * This parameter can only be used in a properly <a
         * href="/youtube/v3/guides/authentication">authorized request</a>.
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter
         * specifies the YouTube channel ID of the channel to which a video is being
         * added. This parameter is required when a request specifies a value for the
         * <code>onBehalfOfContentOwner</code> parameter, and it can only be used in
         * conjunction with that parameter. In addition, the request must be
         * authorized using a CMS account that is linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies. Finally, the
         * channel that the <code>onBehalfOfContentOwnerChannel</code> parameter value
         * specifies must be linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This
         * parameter is intended for YouTube content partners that own and manage many
         * different YouTube channels. It allows content owners to authenticate once
         * and perform actions on behalf of the channel specified in the parameter
         * value, without having to provide authentication credentials for each
         * separate channel.
         */
        onBehalfOfContentOwnerChannel?: string;
        /**
         * The <code><strong>part</strong></code> parameter serves two purposes in
         * this operation. It identifies the properties that the write operation will
         * set as well as the properties that the API response will
         * include.<br><br>The <code>part</code> properties that you can include in
         * the parameter value are <code>id</code>, <code>snippet</code>,
         * <code>cdn</code>, and <code>status</code>.<br><br>Note that this method
         * will override the existing values for all of the mutable properties that
         * are contained in any parts that the parameter value specifies. If the
         * request body does not specify a value for a mutable property, the existing
         * value for that property will be removed.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: LiveStream;
      }): HttpRequest<LiveStream>;
      update(
        request: {
          /** V1 error format. */
          "$.xgafv"?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /**
           * <strong>Note:</strong> This parameter is intended exclusively for YouTube
           * content partners.<br><br>The
           * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
           * that the
           * request's authorization credentials identify a YouTube CMS user who is
           * acting on behalf of the content owner specified in the parameter value.
           * This parameter is intended for YouTube content partners that own and manage
           * many different YouTube channels. It allows content owners to authenticate
           * once and get access to all their video and channel data, without having to
           * provide authentication credentials for each individual channel. The CMS
           * account that the user authenticates with must be linked to the specified
           * YouTube content owner.
           */
          onBehalfOfContentOwner?: string;
          /**
           * This parameter can only be used in a properly <a
           * href="/youtube/v3/guides/authentication">authorized request</a>.
           * <strong>Note:</strong> This parameter is intended exclusively for YouTube
           * content partners.<br><br>The
           * <code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter
           * specifies the YouTube channel ID of the channel to which a video is being
           * added. This parameter is required when a request specifies a value for the
           * <code>onBehalfOfContentOwner</code> parameter, and it can only be used in
           * conjunction with that parameter. In addition, the request must be
           * authorized using a CMS account that is linked to the content owner that the
           * <code>onBehalfOfContentOwner</code> parameter specifies. Finally, the
           * channel that the <code>onBehalfOfContentOwnerChannel</code> parameter value
           * specifies must be linked to the content owner that the
           * <code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This
           * parameter is intended for YouTube content partners that own and manage many
           * different YouTube channels. It allows content owners to authenticate once
           * and perform actions on behalf of the channel specified in the parameter
           * value, without having to provide authentication credentials for each
           * separate channel.
           */
          onBehalfOfContentOwnerChannel?: string;
          /**
           * The <code><strong>part</strong></code> parameter serves two purposes in
           * this operation. It identifies the properties that the write operation will
           * set as well as the properties that the API response will
           * include.<br><br>The <code>part</code> properties that you can include in
           * the parameter value are <code>id</code>, <code>snippet</code>,
           * <code>cdn</code>, and <code>status</code>.<br><br>Note that this method
           * will override the existing values for all of the mutable properties that
           * are contained in any parts that the parameter value specifies. If the
           * request body does not specify a value for a mutable property, the existing
           * value for that property will be removed.
           */
          part: string | string[];
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: LiveStream
      ): HttpRequest<LiveStream>;
    }
    interface MembersResource {
      /** Retrieves a list of members that match the request criteria for a channel. */
      list(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /**
         * Comma separated list of channel IDs. Only data about members that are part
         * of this list will be included in the response.
         */
        filterByMemberChannelId?: string;
        /** Filter members in the results set to the ones that have access to a level. */
        hasAccessToLevel?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /**
         * The <code><strong>maxResults</strong></code> parameter specifies the
         * maximum number of items that should be returned in the result set.
         */
        maxResults?: number;
        /** Parameter that specifies which channel members to return. */
        mode?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * The <code><strong>pageToken</strong></code> parameter identifies a specific
         * page in the result set that should be returned. In an API response, the
         * <code>nextPageToken</code> and <code>prevPageToken</code> properties
         * identify other pages that could be retrieved.
         */
        pageToken?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies the
         * <code>member</code> resource parts that the API response will include. Set
         * the parameter value to <code>snippet</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<MemberListResponse>;
    }
    interface MembershipsLevelsResource {
      /** Retrieves a list of all pricing levels offered by a creator to the fans. */
      list(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies the
         * <code>membershipsLevel</code> resource parts that the API response will
         * include. Supported values are <code>id</code> and <code>snippet</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<MembershipsLevelListResponse>;
    }
    interface PlaylistItemsResource {
      /** Deletes a resource. */
      delete(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        id: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<void>;
      /** Inserts a new resource into this collection. */
      insert(request: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * The <code><strong>part</strong></code> parameter serves two purposes in
         * this operation. It identifies the properties that the write operation will
         * set as well as the properties that the API response will include.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: PlaylistItem;
      }): HttpRequest<PlaylistItem>;
      insert(
        request: {
          /** V1 error format. */
          "$.xgafv"?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /**
           * <strong>Note:</strong> This parameter is intended exclusively for YouTube
           * content partners.<br><br>The
           * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
           * that the
           * request's authorization credentials identify a YouTube CMS user who is
           * acting on behalf of the content owner specified in the parameter value.
           * This parameter is intended for YouTube content partners that own and manage
           * many different YouTube channels. It allows content owners to authenticate
           * once and get access to all their video and channel data, without having to
           * provide authentication credentials for each individual channel. The CMS
           * account that the user authenticates with must be linked to the specified
           * YouTube content owner.
           */
          onBehalfOfContentOwner?: string;
          /**
           * The <code><strong>part</strong></code> parameter serves two purposes in
           * this operation. It identifies the properties that the write operation will
           * set as well as the properties that the API response will include.
           */
          part: string | string[];
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: PlaylistItem
      ): HttpRequest<PlaylistItem>;
      /** Retrieves a list of resources, possibly filtered. */
      list(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        id?: string | string[];
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /**
         * The <code><strong>maxResults</strong></code> parameter specifies the
         * maximum number of items that should be returned in the result set.
         */
        maxResults?: number;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * The <code><strong>pageToken</strong></code> parameter identifies a specific
         * page in the result set that should be returned. In an API response, the
         * <code>nextPageToken</code> and <code>prevPageToken</code> properties
         * identify other pages that could be retrieved.
         */
        pageToken?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies a
         * comma-separated list of one or more <code>playlistItem</code> resource
         * properties that the API response will include.<br><br>If the parameter
         * identifies a property that contains child properties, the child properties
         * will be included in the response. For example, in a
         * <code>playlistItem</code> resource, the <code>snippet</code> property
         * contains numerous fields, including the <code>title</code>,
         * <code>description</code>, <code>position</code>, and
         * <code>resourceId</code> properties. As such, if you set
         * <code><strong>part=snippet</strong></code>, the API response will contain
         * all of those properties.
         */
        part: string | string[];
        /** Return the playlist items within the given playlist. */
        playlistId?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Return the playlist items associated with the given video ID. */
        videoId?: string;
      }): HttpRequest<PlaylistItemListResponse>;
      /** Updates an existing resource. */
      update(request: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * The <code><strong>part</strong></code> parameter serves two purposes in
         * this operation. It identifies the properties that the write operation will
         * set as well as the properties that the API response will
         * include.<br/><br/>Note that this method will override the existing values
         * for all of the mutable properties that are contained in any parts that the
         * parameter value specifies. For example, a playlist item can specify a start
         * time and end time, which identify the times portion of the video that
         * should play when users watch the video in the playlist. If your request is
         * updating a playlist item that sets these values, and the
         * request's <code>part</code> parameter value includes the
         * <code>contentDetails</code> part, the playlist item's start and end times
         * will be updated to whatever value the request body specifies. If the
         * request body does not specify values, the existing start and end times will
         * be removed and replaced with the default settings.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: PlaylistItem;
      }): HttpRequest<PlaylistItem>;
      update(
        request: {
          /** V1 error format. */
          "$.xgafv"?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /**
           * <strong>Note:</strong> This parameter is intended exclusively for YouTube
           * content partners.<br><br>The
           * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
           * that the
           * request's authorization credentials identify a YouTube CMS user who is
           * acting on behalf of the content owner specified in the parameter value.
           * This parameter is intended for YouTube content partners that own and manage
           * many different YouTube channels. It allows content owners to authenticate
           * once and get access to all their video and channel data, without having to
           * provide authentication credentials for each individual channel. The CMS
           * account that the user authenticates with must be linked to the specified
           * YouTube content owner.
           */
          onBehalfOfContentOwner?: string;
          /**
           * The <code><strong>part</strong></code> parameter serves two purposes in
           * this operation. It identifies the properties that the write operation will
           * set as well as the properties that the API response will
           * include.<br/><br/>Note that this method will override the existing values
           * for all of the mutable properties that are contained in any parts that the
           * parameter value specifies. For example, a playlist item can specify a start
           * time and end time, which identify the times portion of the video that
           * should play when users watch the video in the playlist. If your request is
           * updating a playlist item that sets these values, and the
           * request's <code>part</code> parameter value includes the
           * <code>contentDetails</code> part, the playlist item's start and end times
           * will be updated to whatever value the request body specifies. If the
           * request body does not specify values, the existing start and end times will
           * be removed and replaced with the default settings.
           */
          part: string | string[];
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: PlaylistItem
      ): HttpRequest<PlaylistItem>;
    }
    interface PlaylistsResource {
      /** Deletes a resource. */
      delete(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        id: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<void>;
      /** Inserts a new resource into this collection. */
      insert(request: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * This parameter can only be used in a properly <a
         * href="/youtube/v3/guides/authentication">authorized request</a>.
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter
         * specifies the YouTube channel ID of the channel to which a video is being
         * added. This parameter is required when a request specifies a value for the
         * <code>onBehalfOfContentOwner</code> parameter, and it can only be used in
         * conjunction with that parameter. In addition, the request must be
         * authorized using a CMS account that is linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies. Finally, the
         * channel that the <code>onBehalfOfContentOwnerChannel</code> parameter value
         * specifies must be linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This
         * parameter is intended for YouTube content partners that own and manage many
         * different YouTube channels. It allows content owners to authenticate once
         * and perform actions on behalf of the channel specified in the parameter
         * value, without having to provide authentication credentials for each
         * separate channel.
         */
        onBehalfOfContentOwnerChannel?: string;
        /**
         * The <code><strong>part</strong></code> parameter serves two purposes in
         * this operation. It identifies the properties that the write operation will
         * set as well as the properties that the API response will include.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Playlist;
      }): HttpRequest<Playlist>;
      insert(
        request: {
          /** V1 error format. */
          "$.xgafv"?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /**
           * <strong>Note:</strong> This parameter is intended exclusively for YouTube
           * content partners.<br><br>The
           * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
           * that the
           * request's authorization credentials identify a YouTube CMS user who is
           * acting on behalf of the content owner specified in the parameter value.
           * This parameter is intended for YouTube content partners that own and manage
           * many different YouTube channels. It allows content owners to authenticate
           * once and get access to all their video and channel data, without having to
           * provide authentication credentials for each individual channel. The CMS
           * account that the user authenticates with must be linked to the specified
           * YouTube content owner.
           */
          onBehalfOfContentOwner?: string;
          /**
           * This parameter can only be used in a properly <a
           * href="/youtube/v3/guides/authentication">authorized request</a>.
           * <strong>Note:</strong> This parameter is intended exclusively for YouTube
           * content partners.<br><br>The
           * <code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter
           * specifies the YouTube channel ID of the channel to which a video is being
           * added. This parameter is required when a request specifies a value for the
           * <code>onBehalfOfContentOwner</code> parameter, and it can only be used in
           * conjunction with that parameter. In addition, the request must be
           * authorized using a CMS account that is linked to the content owner that the
           * <code>onBehalfOfContentOwner</code> parameter specifies. Finally, the
           * channel that the <code>onBehalfOfContentOwnerChannel</code> parameter value
           * specifies must be linked to the content owner that the
           * <code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This
           * parameter is intended for YouTube content partners that own and manage many
           * different YouTube channels. It allows content owners to authenticate once
           * and perform actions on behalf of the channel specified in the parameter
           * value, without having to provide authentication credentials for each
           * separate channel.
           */
          onBehalfOfContentOwnerChannel?: string;
          /**
           * The <code><strong>part</strong></code> parameter serves two purposes in
           * this operation. It identifies the properties that the write operation will
           * set as well as the properties that the API response will include.
           */
          part: string | string[];
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Playlist
      ): HttpRequest<Playlist>;
      /** Retrieves a list of resources, possibly filtered. */
      list(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Return the playlists owned by the specified channel ID. */
        channelId?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Returen content in specified language */
        hl?: string;
        /** Return the playlists with the given IDs for Stubby or Apiary. */
        id?: string | string[];
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /**
         * The <code><strong>maxResults</strong></code> parameter specifies the
         * maximum number of items that should be returned in the result set.
         */
        maxResults?: number;
        /** Return the playlists owned by the authenticated user. */
        mine?: boolean;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * This parameter can only be used in a properly <a
         * href="/youtube/v3/guides/authentication">authorized request</a>.
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter
         * specifies the YouTube channel ID of the channel to which a video is being
         * added. This parameter is required when a request specifies a value for the
         * <code>onBehalfOfContentOwner</code> parameter, and it can only be used in
         * conjunction with that parameter. In addition, the request must be
         * authorized using a CMS account that is linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies. Finally, the
         * channel that the <code>onBehalfOfContentOwnerChannel</code> parameter value
         * specifies must be linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This
         * parameter is intended for YouTube content partners that own and manage many
         * different YouTube channels. It allows content owners to authenticate once
         * and perform actions on behalf of the channel specified in the parameter
         * value, without having to provide authentication credentials for each
         * separate channel.
         */
        onBehalfOfContentOwnerChannel?: string;
        /**
         * The <code><strong>pageToken</strong></code> parameter identifies a specific
         * page in the result set that should be returned. In an API response, the
         * <code>nextPageToken</code> and <code>prevPageToken</code> properties
         * identify other pages that could be retrieved.
         */
        pageToken?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies a
         * comma-separated list of one or more <code>playlist</code> resource
         * properties that the API response will include.<br><br>If the parameter
         * identifies a property that contains child properties, the child properties
         * will be included in the response. For example, in a <code>playlist</code>
         * resource, the <code>snippet</code> property contains properties like
         * <code>author</code>, <code>title</code>, <code>description</code>,
         * <code>tags</code>, and <code>timeCreated</code>. As such, if you set
         * <code><strong>part=snippet</strong></code>, the API response will contain
         * all of those properties.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<PlaylistListResponse>;
      /** Updates an existing resource. */
      update(request: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * The <code><strong>part</strong></code> parameter serves two purposes in
         * this operation. It identifies the properties that the write operation will
         * set as well as the properties that the API response will
         * include.<br/><br/>Note that this method will override the existing values
         * for mutable properties that are contained in any parts that the request
         * body specifies. For example, a
         * playlist's description is contained in the <code>snippet</code> part, which
         * must be included in the request body. If the request does not specify a
         * value for the <code>snippet.description</code> property, the playlist's
         * existing description will be deleted.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Playlist;
      }): HttpRequest<Playlist>;
      update(
        request: {
          /** V1 error format. */
          "$.xgafv"?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /**
           * <strong>Note:</strong> This parameter is intended exclusively for YouTube
           * content partners.<br><br>The
           * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
           * that the
           * request's authorization credentials identify a YouTube CMS user who is
           * acting on behalf of the content owner specified in the parameter value.
           * This parameter is intended for YouTube content partners that own and manage
           * many different YouTube channels. It allows content owners to authenticate
           * once and get access to all their video and channel data, without having to
           * provide authentication credentials for each individual channel. The CMS
           * account that the user authenticates with must be linked to the specified
           * YouTube content owner.
           */
          onBehalfOfContentOwner?: string;
          /**
           * The <code><strong>part</strong></code> parameter serves two purposes in
           * this operation. It identifies the properties that the write operation will
           * set as well as the properties that the API response will
           * include.<br/><br/>Note that this method will override the existing values
           * for mutable properties that are contained in any parts that the request
           * body specifies. For example, a
           * playlist's description is contained in the <code>snippet</code> part, which
           * must be included in the request body. If the request does not specify a
           * value for the <code>snippet.description</code> property, the playlist's
           * existing description will be deleted.
           */
          part: string | string[];
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Playlist
      ): HttpRequest<Playlist>;
    }
    interface SearchResource {
      /** Retrieves a list of search resources */
      list(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Filter on resources belonging to this channelId. */
        channelId?: string;
        /** Add a filter on the channel search. */
        channelType?: string;
        /** Filter on the livestream status of the videos. */
        eventType?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Search owned by a content owner. */
        forContentOwner?: boolean;
        /**
         * Restrict the search to only retrieve videos uploaded using the project id
         * of the authenticated user.
         */
        forDeveloper?: boolean;
        /** Search for the private videos of the authenticated user. */
        forMine?: boolean;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Filter on location of the video */
        location?: string;
        /** Filter on distance from the location (specified above). */
        locationRadius?: string;
        /**
         * The <code><strong>maxResults</strong></code> parameter specifies the
         * maximum number of items that should be returned in the result set.
         */
        maxResults?: number;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /** Sort order of the results. */
        order?: string;
        /**
         * The <code><strong>pageToken</strong></code> parameter identifies a specific
         * page in the result set that should be returned. In an API response, the
         * <code>nextPageToken</code> and <code>prevPageToken</code> properties
         * identify other pages that could be retrieved.
         */
        pageToken?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies a
         * comma-separated list of one or more <code>search</code> resource properties
         * that the API response will include. Set the parameter value to
         * <code>snippet</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Filter on resources published after this date. */
        publishedAfter?: string;
        /** Filter on resources published before this date. */
        publishedBefore?: string;
        /** Textual search terms to match. */
        q?: string;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Display the content as seen by viewers in this country. */
        regionCode?: string;
        /** Search related to a resource. */
        relatedToVideoId?: string;
        /** Return results relevant to this language. */
        relevanceLanguage?: string;
        /**
         * Indicates whether the search results should include restricted content as
         * well as standard content.
         */
        safeSearch?: string;
        /** Restrict results to a particular topic. */
        topicId?: string;
        /** Restrict results to a particular set of resource types from One Platform. */
        type?: string | string[];
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Filter on the presence of captions on the videos. */
        videoCaption?: string;
        /** Filter on videos in a specific category. */
        videoCategoryId?: string;
        /** Filter on the definition of the videos. */
        videoDefinition?: string;
        /** Filter on 3d videos. */
        videoDimension?: string;
        /** Filter on the duration of the videos. */
        videoDuration?: string;
        /** Filter on embeddable videos. */
        videoEmbeddable?: string;
        /** Filter on the license of the videos. */
        videoLicense?: string;
        /** Filter on syndicated videos. */
        videoSyndicated?: string;
        /** Filter on videos of a specific type. */
        videoType?: string;
      }): HttpRequest<SearchListResponse>;
    }
    interface SponsorsResource {
      /**
       * Retrieves a list of sponsors that match the request criteria for a
       * channel.
       */
      list(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Parameter that specifies which channel sponsors to return. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /**
         * The <code><strong>maxResults</strong></code> parameter specifies the
         * maximum number of items that should be returned in the result set.
         */
        maxResults?: number;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * The <code><strong>pageToken</strong></code> parameter identifies a specific
         * page in the result set that should be returned. In an API response, the
         * <code>nextPageToken</code> and <code>prevPageToken</code> properties
         * identify other pages that could be retrieved.
         */
        pageToken?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies the
         * <code>sponsor</code> resource parts that the API response will include.
         * Supported values are <code>id</code> and <code>snippet</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<SponsorListResponse>;
    }
    interface SubscriptionsResource {
      /** Deletes a resource. */
      delete(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        id: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<void>;
      /** Inserts a new resource into this collection. */
      insert(request: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * The <code><strong>part</strong></code> parameter serves two purposes in
         * this operation. It identifies the properties that the write operation will
         * set as well as the properties that the API response will include.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Subscription;
      }): HttpRequest<Subscription>;
      insert(
        request: {
          /** V1 error format. */
          "$.xgafv"?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /**
           * The <code><strong>part</strong></code> parameter serves two purposes in
           * this operation. It identifies the properties that the write operation will
           * set as well as the properties that the API response will include.
           */
          part: string | string[];
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Subscription
      ): HttpRequest<Subscription>;
      /** Retrieves a list of resources, possibly filtered. */
      list(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Return the subscriptions of the given channel owner. */
        channelId?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /**
         * Return the subscriptions to the subset of these channels that the
         * authenticated user is subscribed to.
         */
        forChannelId?: string;
        /** Return the subscriptions with the given IDs for Stubby or Apiary. */
        id?: string | string[];
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /**
         * The <code><strong>maxResults</strong></code> parameter specifies the
         * maximum number of items that should be returned in the result set.
         */
        maxResults?: number;
        /** Flag for returning the subscriptions of the authenticated user. */
        mine?: boolean;
        myRecentSubscribers?: boolean;
        /** Return the subscribers of the given channel owner. */
        mySubscribers?: boolean;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * This parameter can only be used in a properly <a
         * href="/youtube/v3/guides/authentication">authorized request</a>.
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter
         * specifies the YouTube channel ID of the channel to which a video is being
         * added. This parameter is required when a request specifies a value for the
         * <code>onBehalfOfContentOwner</code> parameter, and it can only be used in
         * conjunction with that parameter. In addition, the request must be
         * authorized using a CMS account that is linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies. Finally, the
         * channel that the <code>onBehalfOfContentOwnerChannel</code> parameter value
         * specifies must be linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This
         * parameter is intended for YouTube content partners that own and manage many
         * different YouTube channels. It allows content owners to authenticate once
         * and perform actions on behalf of the channel specified in the parameter
         * value, without having to provide authentication credentials for each
         * separate channel.
         */
        onBehalfOfContentOwnerChannel?: string;
        /** The order of the returned subscriptions */
        order?: string;
        /**
         * The <code><strong>pageToken</strong></code> parameter identifies a specific
         * page in the result set that should be returned. In an API response, the
         * <code>nextPageToken</code> and <code>prevPageToken</code> properties
         * identify other pages that could be retrieved.
         */
        pageToken?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies a
         * comma-separated list of one or more <code>subscription</code> resource
         * properties that the API response will include.<br><br>If the parameter
         * identifies a property that contains child properties, the child properties
         * will be included in the response. For example, in a
         * <code>subscription</code> resource, the <code>snippet</code> property
         * contains other properties, such as a display title for the subscription. If
         * you set <code><strong>part=snippet</strong></code>, the API response will
         * also contain all of those nested properties.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<SubscriptionListResponse>;
    }
    interface SuperChatEventsResource {
      /** Retrieves a list of resources, possibly filtered. */
      list(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Return rendered funding amounts in specified language. */
        hl?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /**
         * The <code><strong>maxResults</strong></code> parameter specifies the
         * maximum number of items that should be returned in the result set.
         */
        maxResults?: number;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * The <code><strong>pageToken</strong></code> parameter identifies a specific
         * page in the result set that should be returned. In an API response, the
         * <code>nextPageToken</code> and <code>prevPageToken</code> properties
         * identify other pages that could be retrieved.
         */
        pageToken?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies the
         * <code>superChatEvent</code> resource parts that the API response will
         * include. Supported values are <code>id</code> and <code>snippet</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<SuperChatEventListResponse>;
    }
    interface ThumbnailsResource {
      /**
       * As this is not an insert in a strict sense (it supports uploading/setting
       * of a thumbnail for multiple videos, which doesn't result in creation of a
       * single resource), I use a custom verb here.
       */
      set(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The actual
         * CMS account that the user authenticates with must be linked to the
         * specified YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Returns the Thumbnail with the given video IDs for Stubby or Apiary. */
        videoId: string;
      }): HttpRequest<ThumbnailSetResponse>;
    }
    interface VideoAbuseReportReasonsResource {
      /** Retrieves a list of resources, possibly filtered. */
      list(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        hl?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies the
         * <code>videoCategory</code> resource parts that the API response will
         * include. Supported values are <code>id</code> and <code>snippet</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<VideoAbuseReportReasonListResponse>;
    }
    interface VideoCategoriesResource {
      /** Retrieves a list of resources, possibly filtered. */
      list(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        hl?: string;
        /** Returns the video categories with the given IDs for Stubby or Apiary. */
        id?: string | string[];
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies the
         * <code>videoCategory</code> resource properties that the API response will
         * include. Set the parameter value to <code>snippet</code>.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        regionCode?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<VideoCategoryListResponse>;
    }
    interface VideosResource {
      /** Deletes a resource. */
      delete(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        id: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The actual
         * CMS account that the user authenticates with must be linked to the
         * specified YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<void>;
      /**
       * Retrieves the ratings that the authorized user gave to a list of specified
       * videos.
       */
      getRating(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        id: string | string[];
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<VideoRatingListResponse>;
      /** Inserts a new resource into this collection. */
      insert(request: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** Should auto-levels be applied to the upload. */
        autoLevels?: boolean;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /**
         * Notify the channel subscribers about the new video. As default, the
         * notification is enabled.
         */
        notifySubscribers?: boolean;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * This parameter can only be used in a properly <a
         * href="/youtube/v3/guides/authentication">authorized request</a>.
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter
         * specifies the YouTube channel ID of the channel to which a video is being
         * added. This parameter is required when a request specifies a value for the
         * <code>onBehalfOfContentOwner</code> parameter, and it can only be used in
         * conjunction with that parameter. In addition, the request must be
         * authorized using a CMS account that is linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies. Finally, the
         * channel that the <code>onBehalfOfContentOwnerChannel</code> parameter value
         * specifies must be linked to the content owner that the
         * <code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This
         * parameter is intended for YouTube content partners that own and manage many
         * different YouTube channels. It allows content owners to authenticate once
         * and perform actions on behalf of the channel specified in the parameter
         * value, without having to provide authentication credentials for each
         * separate channel.
         */
        onBehalfOfContentOwnerChannel?: string;
        /**
         * The <code><strong>part</strong></code> parameter serves two purposes in
         * this operation. It identifies the properties that the write operation will
         * set as well as the properties that the API response will
         * include.<br/><br/>Note that not all parts contain properties that can be
         * set when inserting or updating a video. For example, the
         * <code>statistics</code> object encapsulates statistics that YouTube
         * calculates for a video and does not contain values that you can set or
         * modify. If the parameter value specifies a <code>part</code> that does not
         * contain mutable values, that <code>part</code> will still be included in
         * the API response.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Should stabilize be applied to the upload. */
        stabilize?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Video;
      }): HttpRequest<Video>;
      insert(
        request: {
          /** V1 error format. */
          "$.xgafv"?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** Should auto-levels be applied to the upload. */
          autoLevels?: boolean;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /**
           * Notify the channel subscribers about the new video. As default, the
           * notification is enabled.
           */
          notifySubscribers?: boolean;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /**
           * <strong>Note:</strong> This parameter is intended exclusively for YouTube
           * content partners.<br><br>The
           * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
           * that the
           * request's authorization credentials identify a YouTube CMS user who is
           * acting on behalf of the content owner specified in the parameter value.
           * This parameter is intended for YouTube content partners that own and manage
           * many different YouTube channels. It allows content owners to authenticate
           * once and get access to all their video and channel data, without having to
           * provide authentication credentials for each individual channel. The CMS
           * account that the user authenticates with must be linked to the specified
           * YouTube content owner.
           */
          onBehalfOfContentOwner?: string;
          /**
           * This parameter can only be used in a properly <a
           * href="/youtube/v3/guides/authentication">authorized request</a>.
           * <strong>Note:</strong> This parameter is intended exclusively for YouTube
           * content partners.<br><br>The
           * <code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter
           * specifies the YouTube channel ID of the channel to which a video is being
           * added. This parameter is required when a request specifies a value for the
           * <code>onBehalfOfContentOwner</code> parameter, and it can only be used in
           * conjunction with that parameter. In addition, the request must be
           * authorized using a CMS account that is linked to the content owner that the
           * <code>onBehalfOfContentOwner</code> parameter specifies. Finally, the
           * channel that the <code>onBehalfOfContentOwnerChannel</code> parameter value
           * specifies must be linked to the content owner that the
           * <code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This
           * parameter is intended for YouTube content partners that own and manage many
           * different YouTube channels. It allows content owners to authenticate once
           * and perform actions on behalf of the channel specified in the parameter
           * value, without having to provide authentication credentials for each
           * separate channel.
           */
          onBehalfOfContentOwnerChannel?: string;
          /**
           * The <code><strong>part</strong></code> parameter serves two purposes in
           * this operation. It identifies the properties that the write operation will
           * set as well as the properties that the API response will
           * include.<br/><br/>Note that not all parts contain properties that can be
           * set when inserting or updating a video. For example, the
           * <code>statistics</code> object encapsulates statistics that YouTube
           * calculates for a video and does not contain values that you can set or
           * modify. If the parameter value specifies a <code>part</code> that does not
           * contain mutable values, that <code>part</code> will still be included in
           * the API response.
           */
          part: string | string[];
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Should stabilize be applied to the upload. */
          stabilize?: boolean;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Video
      ): HttpRequest<Video>;
      /** Retrieves a list of resources, possibly filtered. */
      list(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Return the videos that are in the specified chart. */
        chart?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /**
         * Stands for "host language". Specifies the localization language of the
         * metadata to be filled into snippet.localized. The field is filled with the
         * default metadata if there is no localization in the specified language.
         * The parameter value must be a language code included in the list returned
         * by the i18nLanguages.list method (e.g. en_US, es_MX).
         */
        hl?: string;
        /** Return videos with the given ids. */
        id?: string | string[];
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        locale?: string;
        maxHeight?: number;
        /**
         * The <code><strong>maxResults</strong></code> parameter specifies the
         * maximum number of items that should be returned in the result
         * set.<br><br><strong>Note:</strong> This parameter is supported for use in
         * conjunction with the <code><a href="#myRating">myRating</a></code> and
         * <code><a href="#chart">chart</a></code> parameters, but it is not supported
         * for use in conjunction with the <code><a href="#id">id</a></code>
         * parameter.
         */
        maxResults?: number;
        /** Return the player with maximum height specified in */
        maxWidth?: number;
        /**
         * Return videos liked/disliked by the authenticated user.
         * Does not support RateType.RATED_TYPE_NONE.
         */
        myRating?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * The <code><strong>pageToken</strong></code> parameter identifies a specific
         * page in the result set that should be returned. In an API response, the
         * <code>nextPageToken</code> and <code>prevPageToken</code> properties
         * identify other pages that could be retrieved.<br><br><strong>Note:</strong>
         * This parameter is supported for use in conjunction with the <code><a
         * href="#myRating">myRating</a></code> and <code><a
         * href="#chart">chart</a></code> parameters, but it is not supported for use
         * in conjunction with the <code><a href="#id">id</a></code> parameter.
         */
        pageToken?: string;
        /**
         * The <code><strong>part</strong></code> parameter specifies a
         * comma-separated list of one or more <code>video</code> resource properties
         * that the API response will include.<br><br>If the parameter identifies a
         * property that contains child properties, the child properties will be
         * included in the response. For example, in a <code>video</code> resource,
         * the <code>snippet</code> property contains the <code>channelId</code>,
         * <code>title</code>, <code>description</code>, <code>tags</code>, and
         * <code>categoryId</code> properties. As such, if you set
         * <code><strong>part=snippet</strong></code>, the API response will contain
         * all of those properties.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Use a chart that is specific to the specified region */
        regionCode?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Use chart that is specific to the specified video category */
        videoCategoryId?: string;
      }): HttpRequest<VideoListResponse>;
      /** Adds a like or dislike rating to a video or removes a rating from a video. */
      rate(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        id: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        rating: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<void>;
      /** Report abuse for a video. */
      reportAbuse(request: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: VideoAbuseReport;
      }): HttpRequest<void>;
      reportAbuse(
        request: {
          /** V1 error format. */
          "$.xgafv"?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /**
           * <strong>Note:</strong> This parameter is intended exclusively for YouTube
           * content partners.<br><br>The
           * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
           * that the
           * request's authorization credentials identify a YouTube CMS user who is
           * acting on behalf of the content owner specified in the parameter value.
           * This parameter is intended for YouTube content partners that own and manage
           * many different YouTube channels. It allows content owners to authenticate
           * once and get access to all their video and channel data, without having to
           * provide authentication credentials for each individual channel. The CMS
           * account that the user authenticates with must be linked to the specified
           * YouTube content owner.
           */
          onBehalfOfContentOwner?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: VideoAbuseReport
      ): HttpRequest<void>;
      /** Updates an existing resource. */
      update(request: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The actual
         * CMS account that the user authenticates with must be linked to the
         * specified YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /**
         * The <code><strong>part</strong></code> parameter serves two purposes in
         * this operation. It identifies the properties that the write operation will
         * set as well as the properties that the API response will
         * include.<br/><br/>Note that this method will override the existing values
         * for all of the mutable properties that are contained in any parts that the
         * parameter value specifies. For example, a
         * video's privacy setting is contained in the <code>status</code> part. As
         * such, if your request is updating a private video, and the request's
         * <code>part</code> parameter value includes the <code>status</code> part,
         * the
         * video's privacy setting will be updated to whatever value the request body
         * specifies. If the request body does not specify a value, the existing
         * privacy setting will be removed and the video will revert to the default
         * privacy setting.<br/><br/>In addition, not all parts contain properties
         * that can be set when inserting or updating a video. For example, the
         * <code>statistics</code> object encapsulates statistics that YouTube
         * calculates for a video and does not contain values that you can set or
         * modify. If the parameter value specifies a <code>part</code> that does not
         * contain mutable values, that <code>part</code> will still be included in
         * the API response.
         */
        part: string | string[];
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Video;
      }): HttpRequest<Video>;
      update(
        request: {
          /** V1 error format. */
          "$.xgafv"?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /**
           * <strong>Note:</strong> This parameter is intended exclusively for YouTube
           * content partners.<br><br>The
           * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
           * that the
           * request's authorization credentials identify a YouTube CMS user who is
           * acting on behalf of the content owner specified in the parameter value.
           * This parameter is intended for YouTube content partners that own and manage
           * many different YouTube channels. It allows content owners to authenticate
           * once and get access to all their video and channel data, without having to
           * provide authentication credentials for each individual channel. The actual
           * CMS account that the user authenticates with must be linked to the
           * specified YouTube content owner.
           */
          onBehalfOfContentOwner?: string;
          /**
           * The <code><strong>part</strong></code> parameter serves two purposes in
           * this operation. It identifies the properties that the write operation will
           * set as well as the properties that the API response will
           * include.<br/><br/>Note that this method will override the existing values
           * for all of the mutable properties that are contained in any parts that the
           * parameter value specifies. For example, a
           * video's privacy setting is contained in the <code>status</code> part. As
           * such, if your request is updating a private video, and the request's
           * <code>part</code> parameter value includes the <code>status</code> part,
           * the
           * video's privacy setting will be updated to whatever value the request body
           * specifies. If the request body does not specify a value, the existing
           * privacy setting will be removed and the video will revert to the default
           * privacy setting.<br/><br/>In addition, not all parts contain properties
           * that can be set when inserting or updating a video. For example, the
           * <code>statistics</code> object encapsulates statistics that YouTube
           * calculates for a video and does not contain values that you can set or
           * modify. If the parameter value specifies a <code>part</code> that does not
           * contain mutable values, that <code>part</code> will still be included in
           * the API response.
           */
          part: string | string[];
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Video
      ): HttpRequest<Video>;
    }
    interface WatermarksResource {
      /** Allows upload of watermark image and setting it for a channel. */
      set(request: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        channelId: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: InvideoBranding;
      }): HttpRequest<void>;
      set(
        request: {
          /** V1 error format. */
          "$.xgafv"?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          channelId: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /**
           * <strong>Note:</strong> This parameter is intended exclusively for YouTube
           * content partners.<br><br>The
           * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
           * that the
           * request's authorization credentials identify a YouTube CMS user who is
           * acting on behalf of the content owner specified in the parameter value.
           * This parameter is intended for YouTube content partners that own and manage
           * many different YouTube channels. It allows content owners to authenticate
           * once and get access to all their video and channel data, without having to
           * provide authentication credentials for each individual channel. The CMS
           * account that the user authenticates with must be linked to the specified
           * YouTube content owner.
           */
          onBehalfOfContentOwner?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: InvideoBranding
      ): HttpRequest<void>;
      /** Allows removal of channel watermark. */
      unset(request?: {
        /** V1 error format. */
        "$.xgafv"?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        channelId: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /**
         * <strong>Note:</strong> This parameter is intended exclusively for YouTube
         * content partners.<br><br>The
         * <code><strong>onBehalfOfContentOwner</strong></code> parameter indicates
         * that the
         * request's authorization credentials identify a YouTube CMS user who is
         * acting on behalf of the content owner specified in the parameter value.
         * This parameter is intended for YouTube content partners that own and manage
         * many different YouTube channels. It allows content owners to authenticate
         * once and get access to all their video and channel data, without having to
         * provide authentication credentials for each individual channel. The CMS
         * account that the user authenticates with must be linked to the specified
         * YouTube content owner.
         */
        onBehalfOfContentOwner?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): HttpRequest<void>;
    }

    const activities: ActivitiesResource;

    const captions: CaptionsResource;

    const channelBanners: ChannelBannersResource;

    const channels: ChannelsResource;

    const channelSections: ChannelSectionsResource;

    const comments: CommentsResource;

    const commentThreads: CommentThreadsResource;

    const guideCategories: GuideCategoriesResource;

    const i18nLanguages: I18nLanguagesResource;

    const i18nRegions: I18nRegionsResource;

    const liveBroadcasts: LiveBroadcastsResource;

    const liveChatBans: LiveChatBansResource;

    const liveChatMessages: LiveChatMessagesResource;

    const liveChatModerators: LiveChatModeratorsResource;

    const liveStreams: LiveStreamsResource;

    const members: MembersResource;

    const membershipsLevels: MembershipsLevelsResource;

    const playlistItems: PlaylistItemsResource;

    const playlists: PlaylistsResource;

    const search: SearchResource;

    const sponsors: SponsorsResource;

    const subscriptions: SubscriptionsResource;

    const superChatEvents: SuperChatEventsResource;

    const thumbnails: ThumbnailsResource;

    const videoAbuseReportReasons: VideoAbuseReportReasonsResource;

    const videoCategories: VideoCategoriesResource;

    const videos: VideosResource;

    const watermarks: WatermarksResource;
  }
}
